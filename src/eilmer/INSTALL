Quick installation guide
========================
:Author: Rowan J. Gollan
:Date: 2015-09-02

Prerequisite software
---------------------
To build eilmer, you will require:

  + A C compiler (GNU compiler is a good option and standard on most systems)
  + A D compiler (The DMD compiler is a good choice)
  + readline development package
  + ncurses development package

To build the MPI version, you will need openmpi and its development packages
installed. No other flavour of MPI is supported presently:

  + openmpi
  + openmpi-dev (on Debian/Ubuntu); openmpi-devel (on RedHat/CentOS/Fedora)

Additionally, if you want to run the test suite, you will require:

  + TCL package
  + the Python sympy package

First-time setup
----------------

Make a directory to house the eilmer executables and support files.
In this example, I've called the install directory 'dgdinst' under my
$HOME area.

> mkdir $HOME/dgdinst

Configure your environment to use eilmer. You will need to set the
DGD variable to point to the top of the installation tree, and
the DGD_REPO variable to point to the top of the repository tree.
Note that the installation tree and repository tree are separate. You then
also need to set $PATH, $DGD_LUA_PATH and $DGD_LUA_CPATH to point to
the appropriate places. Some example lines from a .bashrc file are::

   export DGD=$HOME/dgdinst
   export DGD_REPO=$HOME/dgd
   export PATH=$PATH:$DGD/bin
   export DGD_LUA_PATH=$DGD/lib/?.lua
   export DGD_LUA_CPATH=$DGD/lib/?.so

Remember to refresh your current shell (or log out and log back in) so
that your newly configured environment is available.

Compilation and installation
----------------------------

To install to your chosen directory, issue the following command
from within this directory:

> make INSTALL_DIR=$HOME/dgdinst install

On Mac, we need to give the make command an extra hint:

> make PLATFORM=macosx INSTALL_DIR=$HOME/dgdinst install

If you encounter difficulties running the program and would like
more error output, then you should recompile and reinstall the
code using the 'debug' compile option:

> make TARGET=debug INSTALL_DIR=$HOME/dgdinst install

The default build and install will only compile the shared-memory
explicit solver version of Eilmer. If you would also like to
use the steady-state solver (e4sss), then you will need to
request that at build and install stage:

> make WITH_SSS=1 install

Compiling the MPI version
-------------------------

The MPI version is compiled as follows:

> make WITH_MPI=1 install

Compiling with support for Tecplot binary output
------------------------------------------------
There are some extra steps involved if you would like to
compile with Tecplot binary output support. You will
require an installation of Tecplot on your machine
since this houses the required shared libraries
needed at build and run time.

1. Set your LD_LIBRARY_PATH to include the Tecplot directories.
   For example, place something like this in your .bashrc:

   export TECHOME=/my/tecplot/dir
   export LD_LIBRARY_PATH=$TECHOME/bin:$TECHOME/bin/sys

   It is important to get both "bin/" and "bin/sys/" on the
   LD_LIBRARY_PATH since we need access to a shared library
   in each of those directories.

2. Use the TECPLOT_BIN_DIR setting when compiling Eilmer.
   At compile time, Eilmer will build in Tecplot support
   if you provide a valid pointer to the Tecplot "bin/" directory.

   > make TECPLOT_BIN_DIR=$TECHOME/bin install

If you see linking problems at compile time, this likely means that
you have not given the correct path to your tecplot bin installation.

If you see share library problems at run time, this likely means that
you have not correctly configured your LD_LIBRARY_PATH. Check what its
value and see that it is as you expect:
   > echo $LD_LIBRARY_PATH


   
