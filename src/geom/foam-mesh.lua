-- foam-mesh.lua
-- Lua helper definitions for the D program: foam-mesh
--
-- Authors: Rowan G., Ingo J., and Peter J.
-- Date: 2017-07-03

faceMap = {
   north=0,
   east=1,
   south=2,
   west=3,
   top=4,
   bottom=5
}

function checkAllowedNames(myTable, allowedNames)
   local setOfNames = {}
   local namesOk = true
   for i,name in ipairs(allowedNames) do
      setOfNames[name] = true
   end
   for k,v in pairs(myTable) do
      if not setOfNames[k] then
	 print("Warning: Invalid name: ", k)
	 namesOk = false
      end
   end
   return namesOk
end

-- Allowed boundary label prefixes
bndryLabelPrefixes = {"w-", -- for walls
                      "i-", -- for inlets
		      "o-", -- for outlets
		      "s-", -- for symmetry
		      "p-", -- for patches
}

function checkBndryLabels(bndryList)
   for k,v in pairs(bndryList) do
      local labelOK = false
      for _,allowedPrefix in ipairs(bndryLabelPrefixes) do
	 pattern = string.gsub(allowedPrefix, "%-", "%%%-")
	 i, j = string.find(v, pattern)
	 if (i == 1) then
	    labelOK = true
	 end
      end
      -- If labelOK is still false at end, then this particular
      -- label was badly formed.
      if not labelOK then
	 print(string.format("The boundary label '%s' is not allowed.", v))
	 print("Allowed label names start with the following prefixes:")
	 for _,allowedPrefix in ipairs(bndryLabelPrefixes) do
	    print(allowedPrefix)
	 end
	 os.exit(1)
      end
   end
end
	      
-- Storage for global collection of boundary labels
globalBndryLabels = {}

-- Storage for FoamBlock objects
blks = {}

-- Class definition
FoamBlock = {}
function FoamBlock:new(o)
   o = o or {}
   local flag = checkAllowedNames(o, {"grid", "bndry_labels"})
   assert(flag, "Invalid name for item supplied to FoamBlock:new().")
   setmetatable(o, self)
   self.__index = self
   -- Make a record of this block for later use when writing out.
   o.id = #(blks)
   blks[#(blks)+1] = o
   if (o.grid == nil) then
      error("A 'grid' object must be supplied to FoamBlock:new().")
   end
   if (o.grid:get_dimensions() ~= 3) then
      errMsg = "The 'grid' object supplied to FoamBlock:new() must be a 3D grid.\n"
      errMsg = errMsg .. "You can convert a 2D grid using 'makeSlabGrid' or 'makeWedgeGrid' functions."
      error(errMsg)
   end
   if (o.grid:get_type() == "structured_grid") then
      -- We'll need to convert to unstructured before we can proceed
      o.grid = UnstructuredGrid:new{sgrid=o.grid}
   end
   checkBndryLabels(o.bndry_labels)
   -- Populate the unset bndry_labels with the internal defaults
   for face, idx in pairs(faceMap) do
      o.bndry_labels[face] = o.bndry_labels[face] or o.grid:get_boundaryset_tag(idx)
   end
   -- Add the unique boundary labels to the global collection
   for _,bl in pairs(o.bndry_labels) do
      globalBndryLabels[bl] = true
   end
   return o
end

function writeFaceSetFile(grid, blks, label)
   -- Collect all faces that match label
   faces = {}
   for ib, blk in ipairs(blks) do
      for bndry, bndry_label in pairs(blk.bndry_labels) do
	 if (bndry_label == label) then
	    iBndry = 6*(ib-1) + faceMap[bndry]
	    grid:add_boundaryset_faces_to_table(iBndry, faces)
	 end
      end
   end
   if #faces == 0 then
      -- We've found and empty boundaryset. Do nothing.
      if (vrbLvl >= 2) then
	 print("No faces in boundary face set: ", tag)
	 print("Not writing a faceSet file.")
      end
      return
   end
   -- Now write faceSet file
   objName = label.."_faces"
   -- We'll remove the "-" from the tags and replace with underscores
   objName = string.gsub(objName, "-", "_")
   os.execute("mkdir -p constant/polyMesh/sets")
   fname = "constant/polyMesh/sets/"..objName
   -- We'll remove the "-" from the tags and replace with underscores
   fname = string.gsub(fname, "-", "_")
   f = assert(io.open(fname, 'w'))
   f:write(string.format("// Auto-generated by foamMesh on %s\n", os.date("%d-%b-%Y at %X")))
   f:write("\n")
	   
   f:write("FoamFile\n")
   f:write("{\n")
   f:write("    version     2.0;\n")
   f:write("    format      ascii;\n")
   f:write("    class       faceSet;\n")
   f:write('    location    "constant/polyMesh/sets";\n')
   f:write(string.format("    object      %s;\n", objName))
   f:write("}\n")
   f:write("\n")
   f:write(string.format("%d\n", #faces))
   f:write("(\n")
   for _,faceId in ipairs(faces) do
      f:write(string.format("%d\n", faceId))
   end
   f:write(")\n")
end

function writeMeshes()
   blks[1].grid.write_openFoam_polyMesh(".")
   
end

function main(verbosityLevel)
   vrbLvl = verbosityLevel
   if #blks > 1 then
      print("foamMesh only works on the first block presently.")
   end

   if (verbosityLevel >= 1) then
      print("Writing out grid into 'polyMesh/'")
   end
   
   blks[1].grid:writeOpenFoamPolyMesh("constant")

   if (verbosityLevel >= 1) then
      print("Writing out faceSet files into 'sets/'")
   end
   for bl,_ in pairs(globalBndryLabels) do
      if (verbosityLevel >= 2) then
	 print("Writing faceSet file for label: ", bl)
      end
      writeFaceSetFile(blks[1].grid, blks, bl)
   end
   
end   

