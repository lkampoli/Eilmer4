/**
 * steam.d
 * 
 * Contents:
 *       1.IAPWS formulations for state calculation.
 *              1.1 Formulations to calculate saturation (p,T) & boundary equation
 *                      for region 2 and 3.
 *              1.2 IAPWS-Region2 formulation struct.
 *              1.3 IAPWS-Region3 formulation struct (including (rho,T) basic equations
 *          and v(p,T) backward equations).
 *              1.4 IAPWS-Region1 formulation struct.
 *              1.5 IAPWS-Region5 formulaiton struct.
 *              1.6 IAPWS base class whose object has all the calculated values
 *                      of state properties.
 *      2.Local functions to calculate (p,T).
 *              2.1 Get (p,T) from (rho,u) using 2D Newton-Raphson Method
 *                      (only valid for IAPWS Region 2).
 *              2.2 Get (p,T) from (p,s) using 1D Newton-Raphson Method
 *                      (only valid for IAPWS Region 2). 
 *      3.Steam gasmodel class.    
 * Author: Jiasheng(Jason) Liang
 * Version: 28/10/2017
 */

module gas.steam;

import std.stdio;
import std.math;
import std.string;
import std.conv;
import nm.complex;
import nm.number;

import gas.physical_constants;
import gas.gas_model;
import gas.gas_state;

//steam constants:
immutable double R=461.526; /// specific gas constant[J/kg/K]
immutable double rho_c=322; /// critical density [kg/m^^3]      
immutable double T_c=647.096; /// critical thermal temperature [K]
immutable double p_c=22.064e6; /// critical pressure [Pa]
immutable double k_c=1e-3; /// critical thermal conductivity [W/K/m]
immutable double mu_c=1e-6; // critical dynamic viscosity [Pa.s]

//-------------------------------------------------------------------------------
//PART1.1 Formulations to calculate saturation (p,T) & boundary equation
//                                              for region 2 and 3.
//-------------------------------------------------------------------------------

//table for calculating saturation pressure and Temperature 
immutable double[10] table_2_19=
    [0.11670521452767e4,-0.72421316703206e6,-0.17073846940092e2, 0.1202082470247e5,
     -0.32325550322333e7,0.1491510861353e2,-0.48232657361591e4,0.40511340542057e6,
     -0.23855557567849,0.65017534844798e3];

double get_pb23(double T)
{
    /*
     *  calculate boundary value of pressre with a given temperature using eqn 2.1 
     *  and the coefficients inf table 2.1.
     */

    return 1e6*(0.34805185628969e3-0.11671859879975e1*T +0.10192970039326e-2*T^^2);
} 
double get_ps(double T)
{
    /*
     *  calculate saturation pressure with a given temperature using eqn 2.12b,
     *  eqn 2.13 and the coefficients in table 2.19.
     */
    //initialise intermediate properties 
    double vartheta = T+table_2_19[8]/(T-table_2_19[9]);
    double A = vartheta^^2+table_2_19[0]*vartheta+table_2_19[1];
    double B = table_2_19[2]*vartheta^^2+table_2_19[3]*vartheta
        +table_2_19[4];
    double C = table_2_19[5]*vartheta^^2+table_2_19[6]*vartheta
        +table_2_19[7];
    return 1e6*(2*C/(-1*B+(B^^2-4*A*C)^^0.5))^^4;
}
double get_Ts(double p)
{
    /*
     *  calculate saturation Temperature with a given pressure using eqn 2.12a, 
     *  eqn 2.14 and the coefficients in table 2.19
     */ 
    double _beta = (p/1e6)^^0.25;
    double E = _beta^^2+table_2_19[2]*_beta+table_2_19[5];
    double F = table_2_19[0]*_beta^^2+table_2_19[3]*_beta+table_2_19[6];
    double G = table_2_19[1]*_beta^^2+table_2_19[4]*_beta+table_2_19[7];
    double D = 2*G/(-1*F-(F^^2-4*E*G)^^0.5);
    return (table_2_19[9]+D-((table_2_19[9]+D)^^2-4*(table_2_19[8] +table_2_19[9]*D))^^0.5)/2;
}

//---------------------------------------------------------------------------------
//PART 1.2. IAPWS-Region2 formulation struct
//---------------------------------------------------------------------------------     
struct Region2 {
private:
    //state properties
    double p,T; //pressure & temperature
    double quality; //vapour mixture quality 
    //intermediate properties
    double g,gamma_o,gamma_r,pi,tau; 
    //derivatives of intermediate properties
    ///refer to table 2.9 for more details 
    double gamma_o_tau,gamma_o_pi,gamma_o_tautau,gamma_o_pipi,gamma_o_pitau;
    ///refer to table 2.10 for more details
    double gamma_r_tau,gamma_r_pi,gamma_r_tautau,gamma_r_pipi,gamma_r_pitau;

    //Implementing tables 
    double [2][9] table_2_6=
        [/*[J_i, n_i]*/
         [0,-0.96927686500217e1], [1,0.10086655968018e2], [-5,-0.56087911283020e-2],
         [-4,0.71452738081455e-1], [-3,-0.40710498223928],
         /*i=5*/
         [-2,0.14240819171444e1], [-1,-0.43839511319450e1], [2,-0.28408632460772],
         [3,0.21268463753307e-1] ];
    immutable double[3][43] table_2_7=
        [/*[I_i,J_i,n_i]*/
         [1,0,-0.0017731742473213], [1,1,-0.017834862292358], [1,2,-0.045996013696365],
         [1,3,-0.057581259083432], [1,6,-0.05032527872793], [2,1,-3.3032641670203e-05],
         [2,2,-0.00018948987516315], [2,4,-0.0039392777243355], [2,7,-0.043797295650573],
         [2,36,-2.6674547914087e-05], [3,0,2.0481737692309e-08], [3,1,4.3870667284435e-07],
         [3,3,-3.227767723857e-05], [3,6,-0.0015033924542148], [3,35,-0.040668253562649],
         /*16*/
         [4,1,-7.8847309559367e-10], [4,2,1.2790717852285e-08], [4,3,4.8225372718507e-07],
         [5,7,2.2922076337661e-06], [6,3,-1.6714766451061e-11], [6,16,-0.0021171472321355],
         [6,35,-23.895741934104], [7,0,-5.905956432427e-18], [7,11,-1.2621808899101e-06],
         [7,25,-0.038946842435739], [8,8,1.1256211360459e-11], [8,36,-8.2311340897998],
         [9,13,1.9809712802088e-08], [10,4,1.0406965210174e-19], [10,10,-1.0234747095929e-13],
         /*31*/
         [10,14,-1.0018179379511e-09], [16,29,-8.0882908646985e-11], [16,50,0.10693031879409],
         [18,57,-0.33662250574171], [20,20,8.9185845355421e-25], [20,35,3.0629316876232e-13],
         [20,48,-4.2002467698208e-06], [21,21,-5.9056029685639e-26], [22,53,3.7826947613457e-06],
         [23,39,-1.2768608934681e-15], [24,26,7.3087610595061e-29], [24,40,5.5414715350778e-17],
         [24,58,-9.436970724121e-07] ];
    immutable double[3][13] table_2_12=
        [/*[I_i,J_i,n_i]*/
         [1,0,-0.73362260186506e-02], [1,2,-0.88223831943146e-01], [1,5,-0.72334555213245e-01],
         [1,11,-0.40813178534455e-02], [2,1,0.20097803380207e-02], [2,7,-0.53045921898642e-01],
         [2,16,-0.76190409086970e-02], [3,4,-0.63498037657313e-02], [3,16,-0.86043093028588e-01],
         [4,7,0.75321581522770e-02], [4,10,-0.79238375446139e-02], [5,9,-0.22888160778447e-03],
         [5,10,-0.26456501482810e-02] ];
        
    this(double _p, double _T, double _quality){
        p = _p;
        T = _T;
        quality = _quality;
        init;
    }

    void init()
    {
        /*
         * contains all properties and coefficients required to proceed calculation in Region 2.
         */
        pi=p*1e-6;
        tau=540/T;

        //pure steam
        if (quality==1.0 || quality==-1) {
            //table 2.9, derivatives of gamma_o
            ///container for summing value during calculation
            double sum=0;
            double sum_tau=0;
            double sum_tautau=0;
            foreach (i; 0 .. 9) {
                sum += table_2_6[i][1]*(tau^^table_2_6[i][0]);
                sum_tau += table_2_6[i][1]*table_2_6[i][0]*(tau)^^(table_2_6[i][0]-1);
                sum_tautau += table_2_6[i][1]*table_2_6[i][0]*(table_2_6[i][0]-1)
                    *(tau)^^(table_2_6[i][0]-2);
            }
            gamma_o = log(pi) + sum;
            gamma_o_tau = sum_tau;
            gamma_o_tautau = sum_tautau;
            gamma_o_pi = 1/pi; 
            gamma_o_pipi = -(pi)^^(-2); 
            gamma_o_pitau = 0;

            //table 2.10, derivatives of gamma_r
            sum=0;
            sum_tau=0;
            sum_tautau=0;
            double sum_pi=0;
            double sum_pipi=0;
            double sum_pitau=0;
            foreach (i; 0 .. 43) {
                sum += table_2_7[i][2]*((pi)^^(table_2_7[i][0]))
                    *((tau-0.5)^^(table_2_7[i][1]));
                sum_tau += table_2_7[i][2]*((pi)^^(table_2_7[i][0]))
                    *((tau-0.5)^^(table_2_7[i][1]-1))*table_2_7[i][1];
                sum_pi += table_2_7[i][2]*table_2_7[i][0]*(pi^^(table_2_7[i][0]-1))
                    *((tau-0.5)^^(table_2_7[i][1]));
                sum_tautau += table_2_7[i][2]*((pi)^^(table_2_7[i][0]))
                    *((tau-0.5)^^(table_2_7[i][1]-2))*table_2_7[i][1]*(table_2_7[i][1]-1);
                sum_pipi += table_2_7[i][2]*table_2_7[i][0]*(table_2_7[i][0]-1)
                    *(pi^^(table_2_7[i][0]-2))*((tau-0.5)^^(table_2_7[i][1])); 
                sum_pitau += table_2_7[i][2]*table_2_7[i][0]*(pi^^(table_2_7[i][0]-1))
                    *table_2_7[i][1]*((tau-0.5)^^(table_2_7[i][1]-1));          
            }
            gamma_r = sum;
            gamma_r_tau = sum_tau;
            gamma_r_pi = sum_pi; 
            gamma_r_tautau = sum_tautau;
            gamma_r_pipi = sum_pipi;
            gamma_r_pitau = sum_pitau;
        }

        //metastable-vapour region              
        if ( (quality<1.0) && (quality>=0.95) ) {
            //according to eqn 2.9, the gamma_o and its derivatives 
            //within supplementary equation for metastable-vapour region
            double sum=0;
            double sum_tau=0;
            double sum_tautau=0;
            table_2_6[0][1] = -0.96937268393049e1;
            table_2_6[1][1] = 0.10087275970006e2;
            foreach (i; 0 .. 9) {
                sum += table_2_6[i][1]*(tau^^table_2_6[i][0]);
                sum_tau += table_2_6[i][1]*table_2_6[i][0]*(tau)^^(table_2_6[i][0]-1);
                sum_tautau += table_2_6[i][1]*table_2_6[i][0]*(table_2_6[i][0]-1)
                    *(tau)^^(table_2_6[i][0]-2);
            }
            gamma_o = log(pi) + sum;
            gamma_o_tau = sum_tau;
            gamma_o_tautau = sum_tautau;
            gamma_o_pi = 1/pi;
            gamma_o_pipi = -(pi)^^(-2);
            gamma_o_pitau = 0;

            //table 2.13, the gamma_r and its derivaties within supplementary 
            //equation for metastable-vapour region
            sum=0;
            sum_tau=0;
            sum_tautau=0;
            double sum_pi=0;
            double sum_pipi=0;
            double sum_pitau=0;
            foreach (i; 0 .. 13) {
                sum += table_2_12[i][2]*((pi)^^(table_2_12[i][0]))
                    *((tau-0.5)^^(table_2_12[i][1]));
                sum_tau += table_2_12[i][2]*((pi)^^(table_2_12[i][0]))
                    *((tau-0.5)^^(table_2_12[i][1]-1))*table_2_12[i][1];
                sum_pi += table_2_12[i][2]*table_2_12[i][0]*(pi^^(table_2_12[i][0]-1))
                    *((tau-0.5)^^(table_2_12[i][1]));
                sum_tautau += table_2_12[i][2]*((pi)^^(table_2_12[i][0]))
                    *((tau-0.5)^^(table_2_12[i][1]-2))*table_2_12[i][1]*(table_2_12[i][1]-1);
                sum_pipi += table_2_12[i][2]*table_2_12[i][0]*(table_2_12[i][0]-1)
                    *(pi^^(table_2_12[i][0]-2))*((tau-0.5)^^(table_2_12[i][1])); 
                sum_pitau += table_2_12[i][2]*table_2_12[i][0]*(pi^^(table_2_12[i][0]-1))
                    *table_2_12[i][1]*((tau-0.5)^^(table_2_12[i][1]-1));                
            }
            gamma_r = sum;
            gamma_r_tau = sum_tau;
            gamma_r_pi = sum_pi;
            gamma_r_tautau = sum_tautau;
            gamma_r_pipi = sum_pipi;
            gamma_r_pitau = sum_pitau;
        }

        //eqn 2.6 & eqn 2.9
        g = (gamma_r + gamma_o)*R*T;
    }   

public:
    //table 2.8, relations of thermodynamic properties to gamma_o and gamma_r 
    double SpecificVolume()
    {
        return (pi*(gamma_o_pi+gamma_r_pi))*R*T/p;
    } 
    double SpecificEnthalpy()
    {
        return tau*(gamma_o_tau + gamma_r_tau)*R*T;
    }  
    double SpecificInternalEnergy()
    {
        return SpecificEnthalpy - SpecificVolume*p;
    } 
    double SpecificEntropy()
    {
        return SpecificEnthalpy/T - (gamma_o+gamma_r)*R;
    }  
    double SpecificIsobaricHeatCapacity()
    {
        return -(tau^^2)*(gamma_o_tautau+gamma_r_tautau)*R;
    } 
    double SpecificIsochoricHeatCapacity()
    {
        return SpecificIsobaricHeatCapacity
            -(((1+pi*gamma_r_pi-tau*pi*gamma_r_pitau)^^2)/(1-pi^^2*gamma_r_pipi))*R;
    }
    double SoundSpeed()
    {
        double _a,_b,_c,_d;
        _a = 1+2*pi*gamma_r_pi+pi^^2*gamma_r_pi^^2;
        _b = 1-pi^^2*gamma_r_pipi;
        _c = (1+pi*gamma_r_pi-tau*pi*gamma_r_pitau)^^2;
        _d = tau^^2*(gamma_o_tautau+gamma_r_tautau);
        return sqrt((_a/(_b+(_c/_d)))*R*T);
    }   
    double IsobaricCubicExpansionCoefficient()
    {
        return (1+pi*gamma_r_pi - tau*pi*gamma_r_pitau)
            /(1+pi*gamma_r_pi)/T;
    }
    double IsothermalCompressibility()
    {
        return (1-pi^^2*gamma_r_pipi)/(1+pi*gamma_r_pi)/p;
    }
} // end struct Region2

//--------------------------------------------------------------------------------
//PART 1.3. IAPWS-Region5 formulation struct
//--------------------------------------------------------------------------------

struct Region5 {
private:
    //state property
    double p,T; //pressure & temperature 
    //intermediate properties
    double gamma_o,gamma_r,pi,tau; 
    //derivatives of intermediate properties
    ///refer to table 2.25 for more details 
    double gamma_o_tau,gamma_o_pi,gamma_o_tautau,gamma_o_pipi,gamma_o_pitau;
    ///refer to table 2.26 for more details
    double gamma_r_tau,gamma_r_pi,gamma_r_tautau,gamma_r_pipi,gamma_r_pitau;

    //Implementing tables 
    immutable double[2][6] table_2_22=
        [/*[J_i, n_i]*/
         [0,-0.13179983674201e2], [1,0.68540841634434e1], [-3,-0.24805148933466e-1],
         [-2,0.36901534980333], [-1,-0.31161318213925e1],
         /*i=5*/
         [2,-0.32961626538917] ];
    immutable double[3][6] table_2_23=
        [/*[I_i,J_i,n_i]*/
         [1,1,0.15736404855259e-2], [1,2,0.90153761673944e-3], [1,3,-0.50270077677648e-2],
         [2,3,0.22440037409485e-5], [2,9,-0.41163275453471e-5], [3,7,0.37919454822955e-7] ];
        
    this(double _p, double _T)
    {
        p = _p;
        T = _T;
        init;
    }

    void init()
    {
        /*
         * contains all the properties and coefficient required to proceed calculation in 
         * Region 5.
         */     
        pi=p*1e-6;
        tau=1000/T;

        //table 2.25, derivatives of gamma_o
        ///container for summing value during calculation
        double sum=0;
        double sum_tau=0;
        double sum_tautau=0;
        foreach (i; 0 .. 6) {
            sum += table_2_22[i][1]*(tau^^table_2_22[i][0]);
            sum_tau += table_2_22[i][1]*table_2_22[i][0]*(tau)^^(table_2_22[i][0]-1);
            sum_tautau += table_2_22[i][1]*table_2_22[i][0]*(table_2_22[i][0]-1)
                *(tau)^^(table_2_22[i][0]-2);
        }
        gamma_o = log(pi) + sum;
        gamma_o_tau = sum_tau;
        gamma_o_tautau = sum_tautau;
        gamma_o_pi = 1/pi;
        gamma_o_pipi = -(pi)^^(-2);
        gamma_o_pitau = 0;

        //table 2.26, derivatives of gamma_r
        sum=0;
        sum_tau=0;
        sum_tautau=0;
        double sum_pi=0;
        double sum_pipi=0;
        double sum_pitau=0;
        foreach (i; 0 .. 6) {
            sum += table_2_23[i][2]*((pi)^^(table_2_23[i][0]))*((tau)^^(table_2_23[i][1]));
            sum_tau += table_2_23[i][2]*((pi)^^(table_2_23[i][0]))
                *((tau)^^(table_2_23[i][1]-1))*table_2_23[i][1];
            sum_pi += table_2_23[i][2]*table_2_23[i][0]*(pi^^(table_2_23[i][0]-1))
                *((tau)^^(table_2_23[i][1]));
            sum_tautau += table_2_23[i][2]*((pi)^^(table_2_23[i][0]))
                *((tau)^^(table_2_23[i][1]-2))*table_2_23[i][1]*(table_2_23[i][1]-1);
            sum_pipi += table_2_23[i][2]*table_2_23[i][0]*(table_2_23[i][0]-1)
                *(pi^^(table_2_23[i][0]-2))*((tau)^^(table_2_23[i][1])); 
            sum_pitau += table_2_23[i][2]*table_2_23[i][0]*(pi^^(table_2_23[i][0]-1))
                *table_2_23[i][1]*((tau)^^(table_2_23[i][1]-1));                
        }
        gamma_r = sum;
        gamma_r_tau = sum_tau;
        gamma_r_pi = sum_pi; 
        gamma_r_tautau = sum_tautau;
        gamma_r_pipi = sum_pipi;
        gamma_r_pitau = sum_pitau;
    }// end init()

public:
    //table 2.24 
    double SpecificVolume()
    {
        return (pi*(gamma_o_pi+gamma_r_pi))*R*T/p;
    } 
    double SpecificEnthalpy()
    {
        return tau*(gamma_o_tau + gamma_r_tau)*R*T;
    }  
    double SpecificInternalEnergy()
    {
        return SpecificEnthalpy - SpecificVolume*p;
    } 
    double SpecificEntropy()
    {
        return SpecificEnthalpy/T - (gamma_o+gamma_r)*R;
    }  
    double SpecificIsobaricHeatCapacity()
    {
        return -(tau^^2)*(gamma_o_tautau+gamma_r_tautau)*R;
    } 
    double SpecificIsochoricHeatCapacity()
    {
        return SpecificIsobaricHeatCapacity
            -(((1+pi*gamma_r_pi-tau*pi*gamma_r_pitau)^^2)/(1-pi^^2*gamma_r_pipi))*R;
    }
    double SoundSpeed()
    {
        double _a,_b,_c,_d;
        _a = 1+2*pi*gamma_r_pi+pi^^2*gamma_r_pi^^2;
        _b = 1-pi^^2*gamma_r_pipi;
        _c = (1+pi*gamma_r_pi-tau*pi*gamma_r_pitau)^^2;
        _d = tau^^2*(gamma_o_tautau+gamma_r_tautau);
        return sqrt((_a/(_b+(_c/_d)))*R*T);
    }
    double IsobaricCubicExpansionCoefficient()
    {
        return (1+pi*gamma_r_pi - tau*pi*gamma_r_pitau)
            /(1+pi*gamma_r_pi)/T;
    }
    double IsothermalCompressibility()
    {
        return (1-pi^^2*gamma_r_pipi)/(1+pi*gamma_r_pi)/p;
    }
}//end struct Region5

//---------------------------------------------------------------------------------
//PART 1.4. IAPWS-Region3 formulation struct  
//---------------------------------------------------------------------------------
struct Region3 {
private:
    //state property
    double p,T,quality,v,rho; // pressure, temperature, vapour fraction, specific volume, density 
    //(Region3 basic equation)
    //intermediate properties
    double delta,tau;
    //derivatives of intermediate properties,refer to talbe 2.17 for more info 
    double phi,phi_tau,phi_delta, phi_tautau, phi_deltadelta, phi_deltatau;
    immutable double[3][40] table_2_15=
        [/*[I_i,J_i,n_i]*/
         [0,0,0.10658070028513E1],[0,0,-0.15732845290239E2],[0,1,0.20944396974307E2],
         [0,2,-0.76867707878716E1], [0,7,0.26185947787954E1],[0,10,-0.28080781148620E1],
         [0,12,0.12053369696517E1],[0,23,-0.84566812812502E-2], [1,2,-0.12654315477714E1],
         [1,6,-0.11524407806681E1],[1,15,0.88521043984318],[1,17,-0.64207765181607],
         [2,0,0.38493460186671],[2,2,-0.85214708824206],[2,6,0.48972281541877E1],
         [2,7,-0.30502617256965E1], [2,22,0.39420536879154E-1],[2,26,0.12558408424308],
         [3,0,-0.27999329698710],[3,2,0.13899799569460E1], [3,4,-0.20189915023570E1],
         [3,16,-0.82147637173963E-2],[3,26,-0.47596035734923],[4,0,0.43984074473500E-1],
         [4,2,-0.44476435428739],[4,4,0.90572070719733],[4,26,0.70522450087967],
         [5,1,0.10770512626332], [5,3,-0.32913623258954],[5,26,-0.50871062041158],
         [6,0,-0.22175400873096E-1],[6,2,0.94260751665092E-1], [6,26,0.16436278447961],
         [7,2,-0.13503372241348E-1],[8,26,-0.14834345352472E-1],[9,2,0.57922953628084E-3],
         [9,26,0.32308904703711E-2],[10,0,0.80964802996215E-4],[10,1,-0.16557679795037E-3],
         [11,26,-0.44923899061815E-4] ];

    //(Region3 backward equation)
    double pi,theta,v_star,p_star,T_star,_N,_a,_b,_c,_d,_e;
    //tables implemented in v()
    immutable double[][][26] SpecificVolume_coeff =
        [/*table 2.106*/
         [[-12,-12,-12,-10,-10,-10,-8,-8,-8,-6,-5,-5,-5,-4,-3,-3,-3,-3,-2,-2,-2,-1,-1,-1,0,0,1,1,2,2],
          /*I_i*/
          [5,10,12,5,10,12,5,8,10,1,1,5,10,8,0,1,3,6,0,2,3,0,1,2,0,1,0,2,0,2],
          /*J_i*/
          [0.110879558823853e-2,0.572616740810616e3,-0.767051948380852e5,-0.253321069529674e-1,
           0.628008049345689e4, 0.234105654131876e6,0.216867826045856,-0.156237904341963e3,
           -0.269893956176613e5,-0.180407100085505e-3, 0.116732227668261e-2,0.266987040856040e2,
           0.282776617243286e5,-0.242431520029523e4,0.435217323022733e-3, -0.122494831387441e-1,
           0.179357604019989e1,0.442729521058314e2,-0.593223489018342e-2,0.453186261685774,
           0.135825703129140e1,0.408748415856745e-1,0.474686397863312,0.118646814997915e1,
           0.546987265727549, 0.195266770452643,-0.502268790869663e-1,-0.369645308193377,
           0.633828037528420e-2,0.797441793901017e-1]],
          /*n_i*/

         /*table 2.107*/
         [[-12,-12,-10,-10,-8,-6,-6,-6,-5,-5,-5,-4,-4,-4,-3,-3,-3,-3,-3,-2,-2,-2,-1,-1,0,0,1,1,2,3,4,4],
          /*I_i*/
          [10,12,8,14,8,5,6,8,5,8,10,2,4,5,0,1,2,3,5,0,2,5,0,2,0,1,0,2,0,2,0,1],
          /*J_i*/
          [-0.827670470003621e-1,0.416887126010565e2,0.483651982197059e-1,-0.291032084950276e5,
           -0.111422582236948e3, -0.202300083904014e-1,0.294002509338515e3,0.140244997609658e3,
           -0.344384158811459e3,0.361182452612149e3, -0.140699677420738e4,-0.202023902676481e-2,
           0.171346792457471e3,-0.425597804058632e1,0.691346085000334e-5, 0.151140509678925e-2,
           -0.416375290166236e-1,-0.413754957011042e2,-0.506673295721637e2,-0.572212965569023e-3,
           0.608817368401785e1,0.239600660256161e2,0.122261479925384e-1,0.216356057692938e1,
           0.398198903368642, -0.116892827834085,-0.102845919373532,-0.492676637589284,
           0.655540456406790e-1,-0.240462535078530, -0.269798180310075e-1,0.128369435967012]],
          /*n_i*/ 

         /*table 2.108*/
         [[-12,-12,-12,-10,-10,-10,-8,-8,-8,-6,-5,-5,-5,-4,-4,-3,-3,-2,-2,-2,-1,-1,-1,0,0,0,1,1,2,2,2,2,3,3,8],
          /*I_i*/
          [6,8,10,6,8,10,5,6,7,8,1,4,7,2,8,0,3,0,4,5,0,1,2,0,1,2,0,2,0,1,3,7,0,7,1],
          /*J_i*/
          [3.11967788763030,2.76713458847564E+04,3.22583103403269E+07,-3.42416065095363E+02,
          -8.99732529907377E+05, -7.93892049821251E+07,9.53193003217388E+01,2.29784742345072E+03,
          1.75336675322499E+05,7.91214365222792E+06, 3.19933345844209E-05,-6.59508863555767E+01,
          -8.33426563212851E+05,6.45734680583292E-02,-3.82031020570813E+06, 4.06398848470079E-05,
          3.10327498492008E+01,-8.92996718483724E-04,2.34604891591616E+02,3.77515668966951E+03,
          1.58646812591361E-02,7.07906336241843E-01,1.26016225146570E+01,7.36143655772152E-01,
          6.76544268999101E-01, -1.78100588189137E+01,-1.56531975531713E-01,1.17707430048158E+01,
          8.40143653860447E-02,-1.86442467471949E-01, -4.40170203949645E+01,1.23290423502494E+06,
          -2.40650039730845E-02,-1.07077716660869E+06,4.38319858566475E-02]],
          /*n_i*/

         /*table 2.109*/
         [[-12,-12,-12,-12,-12,-12,-10,-10,-10,-10,-10,-10,-10,-8,-8,-8,-8,-6,-6,-5,-5,-5,-5,-4,-4,-4,-3,-3,
           -2,-2,-1,-1,-1,0,0,1,1,3],
         /*I_i*/
          [4,6,7,10,12,16,0,2,4,6,8,10,14,3,7,8,10,6,8,1,2,5,7,0,1,7,2,4,0,1,0,1,5,0,2,0,6,0],
         /*J_i*/
          [-4.52484847171645E-10,3.15210389538801E-05,-2.14991352047545E-03,5.08058874808345E+02,
                   -1.27123036845932E+07, 1.15371133120497E+12,-1.97805728776273E-16,2.41554806033972E-11,
                   -1.56481703640525E-06,2.77211346836625E-03, -2.03578994462286E+01,1.44369489909053E+06,
                   -4.11254217946539E+10,6.23449786243773E-06,-2.21774281146038E+01, -6.89315087933158E+04,
                   -1.95419525060713E+07,3.16373510564015E+03,2.24040754426988E+06,-4.36701347922356E-06,
                   -4.04213852833996E-04,-3.48153203414663E+02,-3.85294213555289E+05,1.35203700099403E-07,
                   1.34648383271089E-04, 1.25031835351736E+05,9.68123678455841E-02,2.25660517512438E+02,
                   -1.90102435341872E-04,-2.99628410819229E-02, 5.00833915372121E-03,3.87842482998411E-01,
                   -1.38535367777182E+03,8.70745245971773E-01,1.71946252068742, -3.26650121426383E-02,
                   4.98044171727877E+03,5.51478022765087E-03]],
         /*n_i*/

         /*table 2.110*/
         [[-12,-12,-10,-10,-10,-10,-10,-8,-8,-8,-6,-5,-4,-4,-3,-3,-3,-2,-2,-2,-2,-1,0,0,1,1,1,2,2],
         /*I_i*/
          [14,16,3,6,10,14,16,7,8,10,6,6,2,4,2,6,7,0,1,3,4,0,0,1,0,4,6,0,2],
         /*J_i*/
          [7.15815808404721E+08,-1.14328360753449E+11,3.76531002015720E-12,-9.03983668691157E-05,
                   6.65695908836252E+05, 5.35364174960127E+09,7.94977402335603E+10,9.22230563421437E+01,
                   -1.42586073991215E+05,-1.11796381424162E+06, 8.96121629640760E+03,-6.69989239070491E+03,
                   4.51242538486834E-03,-3.39731325977713E+01,-1.20523111552278, 4.75992667717124E+04,
                   -2.66627750390341E+05,-1.53314954386524E-04,3.05638404828265E-01,1.23654999499486E+02,
                   -1.04390794213011E+03,-1.57496516174308E-02,6.85331118940253E-01,1.78373462873903,
                   -5.44674124878910E-01, 2.04529931318843E+03,-2.28342359328752E+04,4.13197481515899E-01,
                   -3.41931835910405E+01]],
         /*n_i*/

         /*table 2.111*/
         [[0,0,0,0,0,0,1,1,1,1,2,2,3,3,3,4,5,5,6,7,7,10,12,12,12,14,14,14,14,14,16,16,18,18,20,20,20,22,24,24,28,32],
         /*I_i*/
          [-3,-2,-1,0,1,2,-1,1,2,3,0,1,-5,-2,0,-3,-8,1,-6,-4,1,-6,-10,-8,-4,-12,-10,
                   -8,-6,-4,-10,-8,-12,-10,-12,-10,-6,-12,-12,-4,-12,-12],
         /*J_i*/
          [-2.51756547792325E-08,6.01307193668763E-06,-1.00615977450049E-03,9.99969140252192E-01,
                   2.14107759236486, -1.65175571959086E+01,-1.41987303638727E-03,2.69251915156554,
                   3.49741815858722E+01,-3.00208695771783E+01, -1.31546288252539,-8.39091277286169,
                   1.81545608337015E-10,-5.91099206478909E-04,1.52115067087106, 2.52956470663225E-05,
                   1.00726265203786E-15,-1.49774533860650,-7.93940970562969E-10,-1.50290891264717E-04,
                   1.51205531275133,4.70942606221652E-06,1.95049710391712E-13,-9.11627886266077E-09,
                   6.04374640201265E-04, -2.25132933900136E-16,6.10916973582981E-12,-3.03063908043404E-07,
                   -1.37796070798409E-05,-9.19296736666106E-04, 6.39288223132545E-10,7.53259479898699E-07,
                   -4.00321478682929E-13,7.56140294351614E-09,-9.12082054034891E-12, -2.37612381140539E-08,
                   2.69586010591874E-05,-7.32828135157839E-11,2.41995578306660E-10,-4.05735532730322E-04,
                   1.89424143498011E-10,-4.86632965074563E-10]],
         /*n_i*/

         /*table 2.112*/
         [[-12,-12,-12,-12,-12,-12,-10,-10,-10,-8,-8,-8,-8,-6,-6,-5,-5,-4,-3,-2,-2,-2,-2,
           -1,-1,-1,0,0,0,1,1,1,3,5,6,8,10,10],
         /*I_i*/
          [7,12,14,18,22,24,14,20,24,7,8,10,12,8,22,7,20,22,7,3,5,14,24,2,8,18,0,1,2,0,1,3,24,22,12,3,0,6],
         /*J_i*/
          [4.12209020652996E-05,-1.14987238280587E+06,9.48180885032080E+09,-1.95788865718971E+17,
                   4.96250704871300E+24, -1.05549884548496E+28,-7.58642165988278E+11,-9.22172769596101E+22,
                   7.25379072059348E+29,-6.17718249205859E+01, 1.07555033344858E+04,-3.79545802336487E+07,
                   2.28646846221831E+11,-4.99741093010619E+06,-2.80214310054101E+30, 1.04915406769586E+06,
                   6.13754229168619E+27,8.02056715528378E+31,-2.98617819828065E+07,-9.10782540134681E+01,
                   1.35033227281565E+05,-7.12949383408211E+18,-1.04578785289542E+36,3.04331584444093E+01,
                   5.93250797959445E+09, -3.64174062110798E+27,9.21791403532461E-01,-3.37693609657471E-01,
                   -7.24644143758508E+01,-1.10480239272601E-01, 5.36516031875059,-2.91441872156205E+03,
                   6.16338176535305E+39,-1.20889175861180E+38,8.18396024524612E+22, 9.40781944835829E+08,
                   -3.67279669545448E+04,-8.37513931798655E+15]],
         /*n_i*/

         /*table 2.113*/
         [[-12,-12,-10,-10,-10,-10,-10,-10,-8,-8,-8,-8,-8,-6,-6,-6,-5,-5,-5,-4,-4,-3,-3,-2,-1,-1,0,1,1],
         /*I_i*/
          [8,12,4,6,8,10,14,16,0,1,6,7,8,4,6,8,2,3,4,2,4,1,2,0,0,2,0,0,2],
         /*J_i*/
          [5.61379678887577E-02,7.74135421587083E+09,1.11482975877938E-09,-1.43987128208183E-03,
                   1.93696558764920E+03, -6.05971823585005E+08,1.71951568124337E+13,-1.85461154985145E+16,
                   3.87851168078010E-17,-3.95464327846105E-14, -1.70875935679023E+02,-2.12010620701220E+03,
                   1.77683337348191E+07,1.10177443629575E+01,-2.34396091693313E+05, -6.56174421999594E+06,
                   1.56362212977396E-05,-2.12946257021400,1.35249306374858E+01,1.77189164145813E-01,
                   1.39499167345464E+03,-7.03670932036388E-03,-1.52011044389648E-01,9.81916922991113E-05,
                   1.47199658618076E-03, 2.02618487025578E+01,8.99345518944240E-01,-2.11346402240858E-01,
                   2.49971752957491E+01]],
         /*n_i*/

         /*table 2.114*/
         [[0,0,0,1,1,1,1,2,3,3,4,4,4,5,5,5,7,7,8,8,10,12,12,12,14,14,14,14,18,18,18,18,18,
           20,20,22,24,24,32,32,36,36],
         /*I_i*/
          [0,1,10,-4,-2,-1,0,0,-5,0,-3,-2,-1,-6,-1,12,-4,-3,-6,10,-8,-12,-6,-4,-10,-8,-4,5,
                   -12,-10,-8,-6,2,-12,-10,-12,-12,-8,-10,-5,-10,-8],
         /*J_i*/
          [1.06905684359136,-1.48620857922333,2.59862256980408E+14,-4.46352055678749E-12,
                   -5.66620757170032E-07, -2.35302885736849E-03,-2.69226321968839E-01,9.22024992944392,
                   3.57633505503772E-12,-1.73942565562222E+01, 7.00681785556229E-06,-2.67050351075768E-04,
                   -2.31779669675624,-7.53533046979752E-13,4.81337131452891, -2.23286270422356E+21,
                   -1.18746004987383E-05,6.46412934136496E-03,-4.10588536330937E-10,4.22739537057241E+19,
                   3.13698180473812E-13,1.64395334345040E-24,-3.39823323754373E-06,-1.35268639905021E-02,
                   -7.23252514211625E-15, 1.84386437538366E-09,-4.63959533752385E-02,-9.92263100376750E+13,
                   6.88169154439335E-17,-2.22620998452197E-11, -5.40843018624083E-08,3.45570606200257E-03,
                   4.22275800304086E+10,-1.26974478770487E-15,9.27237985153679E-10, 6.12670812016489E-14,
                   -7.22693924063497E-12,-3.83669502636822E-04,3.74684572410204E-04,-9.31976897511086E+04,
                   -2.47690616026922E-02,6.58110546759474E+01]],
         /*n_i*/

         /*table 2.115*/
         [[0,0,0,1,1,1,2,2,3,4,4,5,5,5,6,10,12,12,14,14,14,16,18,20,20,24,24,28,28],
         /*I_i*/
          [-1,0,1,-2,-1,1,-1,1,-2,-2,2,-3,-2,0,3,-6,-8,-3,-10,-8,-5,-10,-12,-12,-10,-12,-6,-12,-5],
         /*J_i*/
          [-1.11371317395540E-04,1.00342892423685,5.30615581928979,1.79058760078792E-06,
                   -7.28541958464774E-04, -1.87576133371704E+01,1.99060874071849E-03,2.43574755377290E+01,
                   -1.77040785499444E-04,-2.59680385227130E-03, -1.98704578406823E+02,7.38627790224287E-05,
                   -2.36264692844138E-03,-1.61023121314333,6.22322971786473E+03, -9.60754116701669E-09,
                   -5.10572269720488E-11,7.67373781404211E-03,6.63855469485254E-15,-7.17590735526745E-10,
                   1.46564542926508E-05,3.09029474277013E-12,-4.64216300971708E-16,-3.90499637961161E-14,
                   -2.36716126781431E-10, 4.54652854268717E-12,-4.22271787482497E-03,2.83911742354706E-11,
                   2.70929002720228]],
         /*n_i*/

         /*table 2.116*/
         [[-2,-2,-1,-1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,2,2,2,2,2,2,5,5,5,6,6,6,6,8,10,12],
         /*I_i*/
          [10,12,-5,6,-12,-6,-2,-1,0,1,2,3,14,-3,-2,0,1,2,-8,-6,-3,-2,0,4,-12,-6,-3,-12,-10,-8,-5,-12,-12,-10],
         /*J_i*/
          [-4.01215699576099E+08,4.84501478318406E+10,3.94721471363678E-15,3.72629967374147E+04,
                   -3.69794374168666E-30, -3.80436407012452E-15,4.75361629970233E-07,-8.79148916140706E-04,
                   8.44317863844331E-01,1.22433162656600E+01, -1.04529634830279E+02,5.89702771277429E+02,
                   -2.91026851164444E+13,1.70343072841850E-06,-2.77617606975748E-04, -3.44709605486686,
                   2.21333862447095E+01,-1.94646110037079E+02,8.08354639772825E-16,-1.80845209145470E-11,
                   -6.96664158132412E-06,-1.81057560300994E-03,2.55830298579027,3.28913873658481E+03,
                   -1.73270241249904E-19, -6.61876792558034E-07,-3.95688923421250E-03,6.04203299819132E-18,
                   -4.00879935920517E-14,1.60751107464958E-09, 3.83719409025556E-05,-6.49565446702457E-15,
                   -1.49095328506000E-12,5.41449377329581E-09]],
         /*n_i*/

         /*table 2.117*/
         [[-12,-12,-12,-12,-12,-10,-10,-8,-8,-8,-8,-8,-8,-8,-6,-5,-5,-4,-4,-3,-3,-3,-3,-2,-2,-2,-1,-1,-1,0,0,0,0,1,1,2,4,5,5,6,10,10,14],
         /*I_i*/
          [14,16,18,20,22,14,24,6,10,12,14,18,24,36,8,4,5,7,16,1,3,18,20,2,3,10,0,1,3,0,1,2,12,0,16,1,0,0,1,14,4,12,10],
         /*J_i*/
          [2.60702058647537E+09,-1.88277213604704E+14,5.54923870289667E+18,-7.58966946387758E+22,
                   4.13865186848908E+26, -8.15038000738060E+11,-3.81458260489955E+32,-1.23239564600519E-02,
                   2.26095631437174E+07,-4.95017809506720E+11, 5.29482996422863E+15,-4.44359478746295E+22,
                   5.21635864527315E+34,-4.87095672740742E+54,-7.14430209937547E+05, 1.27868634615495E-01,
                   -1.00752127917598E+01,7.77451437960990E+06,-1.08105480796471E+24,-3.57578581169659E-06,
                   -2.12857169423484,2.70706111085238E+29,-6.95953622348829E+32,1.10609027472280E-01,
                   7.21559163361354E+01, -3.06367307532219E+14,2.65839618885530E-05,2.53392392889754E-02,
                   -2.14443041836579E+02,9.37846601489667E-01, 2.23184043101700,3.38401222509191E+01,
                   4.94237237179718E+20,-1.98068404154428E-01,-1.41415349881140E+30, -9.93862421613651E+01,
                   1.25070534142731E+02,-9.96473529004439E+02,4.73137909872765E+04,1.16662121219322E+32,
                   -3.15874976271533E+15,-4.45703369196945E+32,6.42794932373694E+32]],
         /*n_i*/

         /*table 2.118*/
         [[0,3,8,20,1,3,4,5,1,6,2,4,14,2,5,3,0,1,1,1,28,2,16,0,5,0,3,4,12,16,1,8,14,0,2,3,4,8,14,24],
         /*I_i*/
          [0,0,0,2,5,5,5,5,6,6,7,8,8,10,10,12,14,14,18,20,20,22,22,24,24,28,28,28,28,28,32,32,32,36,36,36,36,36,36,36],
         /*J_i*/
          [8.11384363481847E-01,-5.68199310990094E+03,-1.78657198172556E+10,7.95537657613427E+31,
                   -8.14568209346872E+04, -6.59774567602874E+07,-1.52861148659302E+10,-5.60165667510446E+11,
                   4.58384828593949E+05,-3.85754000383848E+13, 4.53735800004273E+07,9.39454935735563E+11,
                   2.66572856432938E+27,-5.47578313899097E+09,2.00725701112386E+14, 1.85007245563239E+12,
                   1.85135446828337E+08,-1.70451090076385E+11,1.57890366037614E+14,-2.02530509748774E+15,
                   3.68193926183570E+59,1.70215539458936E+17,6.39234909918741E+41,-8.21698160721956E+14,
                   -7.95260241872306E+23, 2.33415869478510E+17,-6.00079934586803E+22,5.94584382273384E+24,
                   1.89461279349492E+39,-8.10093428842645E+45, 1.88813911076809E+21,1.11052244098768E+35,
                   2.91133958602503E+45,-3.29421923951460E+21,-1.37570282536696E+25, 1.81508996303902E+27,
                   -3.46865122768353E+29,-2.11961148774260E+37,-1.28617899887675E+48,4.79817895699239E+64]],
         /*n_i*/

         /*table 2.119*/
         [[0,3,4,6,7,10,12,14,18,0,3,5,6,8,12,0,3,7,12,2,3,4,2,4,7,4,3,5,6,0,0,3,1,0,1,0,1,0,1],
         /*I_i*/
          [-12,-12,-12,-12,-12,-12,-12,-12,-12,-10,-10,-10,-10,-10,-10,-8,-8,-8,-8,-6,-6,-6,
                   -5,-5,-5,-4,-3,-3,-3,-2,-1,-1,0,1,1,2,4,5,6],
         /*J_i*/
          [2.80967799943151E-39,6.14869006573609E-31,5.82238667048942E-28,3.90628369238462E-23,
                   8.21445758255119E-21, 4.02137961842776E-15,6.51718171878301E-13,-2.11773355803058E-08,
                   2.64953354380072E-03,-1.35031446451331E-32, -6.07246643970893E-24,-4.02352115234494E-19,
                   -7.44938506925544E-17,1.89917206526237E-13,3.64975183508473E-06, 1.77274872361946E-26,
                   -3.34952758812999E-19,-4.21537726098389E-09,-3.91048167929649E-02,5.41276911564176E-14,
                   7.05412100773699E-12,2.58585887897486E-09,-4.93111362030162E-11,-1.58649699894543E-06,
                   -5.25037427886100E-01, 2.20019901729615E-03,-6.43064132636925E-03,6.29154149015048E+01,
                   1.35147318617061E+02,2.40560808321713E-07, -8.90763306701305E-04,-4.40209599407714E+03,
                   -3.02807107747776E+02,1.59158748314599E+03,2.32534272709876E+05, -7.92681207132600E+05,
                   -8.69871364662769E+10,3.54542769185671E+11,4.00849240129329E+14]],
         /*n_i*/

         /*table 2.120*/
         [[0,0,0,2,3,4,4,4,4,4,5,5,6,7,8,8,8,10,10,14,14,20,20,24],
         /*I_i*/
          [-12,-4,-1,-1,-10,-12,-8,-5,-4,-1,-4,-3,-8,-12,-10,-8,-4,-12,-8,-12,-8,-12,-10,-12],
         /*J_i*/
          [1.28746023979718E-35,-7.35234770382342E-12,2.89078692149150E-03,2.44482731907223E-01,
                   1.41733492030985E-24, -3.54533853059476E-29,-5.94539202901431E-18,-5.85188401782779E-09,
                   2.01377325411803E-06,1.38647388209306, -1.73959365084772E-05,1.37680878349369E-03,
                   8.14897605805513E-15,4.25596631351839E-26,-3.87449113787755E-18, 1.39814747930240E-13,
                   -1.71849638951521E-03,6.41890529513296E-22,1.18960578072018E-11,-1.55282762571611E-18,
                   2.33907907347507E-08,-1.74093247766213E-13,3.77682649089149E-09,-5.16720236575302E-11]],
         /*n_i*/

         /*table 2.121*/
         [[0,0,0,0,1,2,3,3,4,6,7,7,8,10,12,12,12,14,14,14,16,18,20,22,24,24,36],
         /*I_i*/
          [-1,0,1,2,1,-1,-3,0,-2,-2,-5,-4,-2,-3,-12,-6,-5,-10,-8,-3,-8,-8,-10,-10,-12,-8,-12],
         /*J_i*/
          [-9.82825342010366E-05,1.05145700850612,1.16033094095084E+02,3.24664750281543E+03,
                   -1.23592348610137E+03, -5.61403450013495E-02,8.56677401640869E-08,2.36313425393924E+02,
                   9.72503292350109E-03,-1.03001994531927, -1.49653706199162E-09,-2.15743778861592E-05,
                   -8.34452198291445,5.86602660564988E-01,3.43480022104968E-26, 8.16256095947021E-06,
                   2.94985697916798E-03,7.11730466276584E-17,4.00954763806941E-10,1.07766027032853E+01,
                   -4.09449599138182E-07,-7.29121307758902E-06,6.77107970938909E-09,6.02745973022975E-08,
                   -3.82323011855257E-11, 1.79946628317437E-03,-3.45042834640005E-04]],
         /*n_i*/

         /*table 2.122*/
         [[-12,-12,-10,-10,-10,-10,-8,-6,-5,-5,-4,-4,-3,-2,-2,-2,-2,-1,-1,-1,0,1,1,1],
         /*I_i*/
          [10,12,6,7,8,10,8,6,2,5,3,4,3,0,1,2,4,0,1,2,0,0,1,3],
         /*J_i*/
          [-8.20433843259950E+04,4.73271518461586E+10,-8.05950021005413E-02,3.28600025435980E+01,
                   -3.56617029982490E+03, -1.72985781433335E+09,3.51769232729192E+07,-7.75489259985144E+05,
                   7.10346691966018E-05,9.93499883820274E+04, -6.42094171904570E-01,-6.12842816820083E+03,
                   2.32808472983776E+02,-1.42808220416837E-05,-6.43596060678456E-03, -4.28577227475614,
                   2.25689939161918E+03,1.00355651721510E-03,3.33491455143516E-01,1.09697576888873,
                   9.61917379376452E-01,-8.38165632204598E-02,2.47795908411492,-3.19114969006533E+03]],
         /*n_i*/

         /*table 2.123*/
         [[-8,-8,-3,-3,-3,-3,-3,0,0,0,0,3,3,8,8,8,8,10,10,10,10,10,10,10,10,12,14],
         /*I_i*/
          [6,14,-3,3,4,5,8,-1,0,1,5,-6,-2,-12,-10,-8,-5,-12,-10,-8,-6,-5,-4,-3,-2,-12,-12],
         /*J_i*/
          [1.44165955660863E-03,-7.01438599628258E+12,-8.30946716459219E-17,2.61975135368109E-01,
                   3.93097214706245E+02, -1.04334030654021E+04,4.90112654154211E+08,-1.47104222772069E-04,
                   1.03602748043408,3.05308890065089, -3.99745276971264E+06,5.69233719593750E-12,
                   -4.64923504407778E-02,-5.35400396512906E-18,3.99988795693162E-13, -5.36479560201811E-07,
                   1.59536722411202E-02,2.70303248860217E-15,2.44247453858506E-08,-9.83430636716454E-06,
                   6.63513144224454E-02,-9.93456957845006,5.46491323528491E+02,-1.43365406393758E+04,
                   1.50764974125511E+05, -3.37209709340105E-10,3.77501980025469E-09]],
         /*n_i*/

         /*table 2.124*/
         [[-12,-12,-10,-8,-6,-5,-5,-4,-4,-3,-3,-2,-1,-1,-1,0,0,0,0,1,1,3,3,3,4,4,4,5,14],
         /*I_i*/
          [20,24,22,14,36,8,16,6,32,3,8,4,1,2,3,0,1,4,28,0,32,0,1,2,3,18,24,4,24],
         /*J_i*/
          [-5.32466612140254E+22,1.00415480000824E+31,-1.91540001821367E+29,1.05618377808847E+16,
                   2.02281884477061E+58, 8.84585472596134E+07,1.66540181638363E+22,-3.13563197669111E+05,
                   -1.85662327545324E+53,-6.24942093918942E-02, -5.04160724132590E+09,1.87514491833092E+04,
                   1.21399979993217E-03,1.88317043049455,-1.67073503962060E+03, 9.65961650599775E-01,
                   2.94885696802488,-6.53915627346115E+04,6.04012200163444E+49,-1.98339358557937E-01,
                   -1.75984090163501E+57,3.56314881403987,-5.75991255144384E+02,4.56213415338071E+04,
                   -1.09174044987829E+07, 4.37796099975134E+33,-6.16552611135792E+45,1.93568768917797E+09,
                   9.50898170425042E+53]],
         /*n_i*/

         /*table 2.125*/
         [[0,0,0,0,1,1,2,2,2,3,3,4,4,7,7,7,7,7,10,10,10,10,10,18,20,22,22,24,28,32,32,32,36],
         /*I_i*/
          [0,1,4,12,0,10,0,6,14,3,8,0,10,3,4,7,20,36,10,12,14,16,22,18,32,22,36,24,28,22,32,36,36],
         /*J_i*/
          [1.55287249586268,6.64235115009031,-2.89366236727210E+03,-3.85923202309848E+12,
                   -2.91002915783761, -8.29088246858083E+11,1.76814899675218,-5.34686695713469E+08,
                   1.60464608687834E+17,1.96435366560186E+05, 1.56637427541729E+12,-1.78154560260006,
                   -2.29746237623692E+15,3.85659001648006E+07,1.10554446790543E+09, -6.77073830687349E+13,
                   -3.27910592086523E+30,-3.41552040860644E+50,-5.27251339709047E+20,2.45375640937055E+23,
                   -1.68776617209269E+26,3.58958955867578E+28,-6.56475280339411E+35,3.55286045512301E+38,
                   5.69021454413270E+57, -7.00584546433113E+47,-7.05772623326374E+64,1.66861176200148E+52,
                   -3.00475129680486E+60,-6.68481295196808E+50, 4.28432338620678E+68,-4.44227367758304E+71,
                   -2.81396013562745E+76]],
         /*n_i*/

         /*table 2.132*/
         [[-12,-10,-10,-10,-8,-8,-8,-6,-6,-5,-5,-5,-3,-1,-1,-1,-1,0,0,1,2,2,3,5,5,5,6,6,8,8,10,12,12,12,14,14,14,14],
         /*I_i*/
          [14,10,12,14,10,12,14,8,12,4,8,12,2,-1,1,12,14,-3,1,-2,5,10,-5,-4,2,3,-5,2,-8,8,-4,-12,-4,4,-12,-10,-6,6],
         /*J_i*/
          [1.22088349258355E+17,1.04216468608488E+09,-8.82666931564652E+15,2.59929510849499E+19,
                   2.22612779142211E+14, -8.78473585050085E+17,-3.14432577551552E+21,-2.16934916996285E+12,
                   1.59079648196849E+20,-3.39567617303423E+02, 8.84387651337836E+12,-8.43405926846418E+20,
                   1.14178193518022E+01,-1.22708229235641E-04,-1.06201671767107E+02, 9.03443213959313E+24,
                   -6.93996270370852E+27,6.48916718965575E-09,7.18957567127851E+03,1.05581745346187E-03,
                   -6.51903203602581E+14,-1.60116813274676E+24,-5.10254294237837E-09,-1.52355388953402E-01,
                   6.77143292290144E+11, 2.76378438378930E+14,1.16862983141686E-02,-3.01426947980171E+13,
                   1.69719813884840E-08,1.04674840020929E+26, -1.08016904560140E+04,-9.90623601934295E-13,
                   5.36116483602738E+06,2.26145963747881E+21,-4.88731565776210E-10, 1.51001548880670E-05,
                   -2.27700464643920E+04,-7.81754507698846E+27]],
         /*n_i*/

         /*table 2.133*/
         [[-10,-8,-6,-6,-6,-6,-6,-6,-5,-5,-5,-5,-5,-5,-4,-4,-4,-4,-3,-3,-3,-2,-2,-1,-1,0,0,0,1,1,3,4,4,4,5,8,10,12,14],
         /*I_i*/
          [-8,-12,-12,-3,5,6,8,10,1,2,6,8,10,14,-12,-10,-6,10,-3,10,12,2,4,-2,0,-2,6,10,
                   -12,-10,3,-6,3,10,2,-12,-2,-3,1],
         /*J_i*/
          [-4.15652812061591E-55,1.77441742924043E-61,-3.57078668203377E-55,3.59252213604114E-26,
                   -2.59123736380269E+01, 5.94619766193460E+04,-6.24184007103158E+10,3.13080299915944E+16,
                   1.05006446192036E-09,-1.92824336984852E-06, 6.54144373749937E+05,5.13117462865044E+12,
                   -6.97595750347391E+18,-1.03977184454767E+28,1.19563135540666E-48, -4.36677034051655E-42,
                   9.26990036530639E-30,5.87793105620748E+20,2.80375725094731E-18,-1.92359972440634E+22,
                   7.42705723302738E+26,-5.17429682450605E+01,8.20612048645469E+06,-1.88214882341448E-09,
                   1.84587261114837E-02, -1.35830407782663E-06,-7.23681885626348E+16,-2.23449194054124E+26,
                   -1.11526741826431E-35,2.76032601145151E-29, 1.34856491567853E+14,6.52440293345860E-10,
                   5.10655119774360E+16,-4.68138358908732E+31,-7.60667491183279E+15, -4.17247986986821E-19,
                   3.12545677756104E+13,-1.00375333864186E+14,2.47761392329058E+26]],
         /*n_i*/

         /*table 2.134*/
         [[-12,-12,-10,-10,-8,-8,-8,-6,-6,-6,-6,-5,-4,-4,-3,-3,-2,-2,-1,-1,-1,0,0,1,2,2,3,3,5,5,5,8,8,10,10],
         /*I_i*/
          [8,14,-1,8,6,8,14,-4,-3,2,8,-10,-1,3,-10,3,1,2,-8,-4,1,-12,1,-1,-1,2,-12,-5,-10,-8,-6,-12,-10,-12,-8],
         /*J_i*/
          [-5.86219133817016E-08,-8.94460355005526E+10,5.31168037519774E-31,1.09892402329239E-01,
                   -5.75368389425212E-02, 2.28276853990249E+04,-1.58548609655002E+18,3.29865748576503E-28,
                   -6.34987981190669E-25,6.15762068640611E-09, -9.61109240985747E+07,-4.06274286652625E-45,
                   -4.71103725498077E-13,7.25937724828145E-01,1.87768525763682E-39, -1.03308436323771E+03,
                   -6.62552816342168E-02,5.79514041765710E+02,2.37416732616644E-27,2.71700235739893E-15,
                   -9.07886213483600E+01,-1.71242509570207E-37,1.56792067854621E+02,9.23261357901470E-01,
                   -5.97865988422577, 3.21988767636389E+06,-3.99441390042203E-30,4.93429086046981E-08,
                   8.12036983370565E-20,-2.07610284654137E-12, -3.40821291419719E-07,5.42000573372233E-18,
                   -8.56711586510214E-13,2.66170454405981E-14,8.58133791857099E-06]],
         /*n_i*/

         /*table 2.135*/
         [[-8,-6,-5,-4,-4,-4,-3,-3,-1,0,0,0,1,1,2,3,3,3,4,5,5,5,6,8,8,8,8,10,12,12,12,12,14,14,14,14],
         /*I_i*/
          [14,10,10,1,2,14,-2,12,5,0,4,10,-10,-1,6,-12,0,8,3,-6,-2,1,1,-6,-3,1,8,-8,-10,-8,-5,-4,-12,-10,-8,-6],
         /*J_i*/
          [3.77373741298151E+18,-5.07100883722913E+12,-1.03363225598860E+15,1.84790814320773E-06,
                   -9.24729378390945E-04, -4.25999562292738E+23,-4.62307771873973E-13,1.07319065855767E+21,
                   6.48662492280682E+10,2.44200600688281, -8.51535733484258E+09,1.69894481433592E+21,
                   2.15780222509020E-27,-3.20850551367334E-01,-3.82642448458610E+16, -2.75386077674421E-29,
                   -5.63199253391666E+05,-3.26068646279314E+20,3.97949001553184E+13,1.00824008584757E-07,
                   1.62234569738433E+04,-4.32355225319745E+10,-5.92874245598610E+11,1.33061647281106,
                   1.57338197797544E+06, 2.58189614270853E+13,2.62413209706358E+24,-9.20011937431142E-02,
                   2.20213765905426E-03,-1.10433759109547E+01, 8.47004870612087E+06,-5.92910695762536E+08,
                   -1.83027173269660E-05,1.81339603516302E-01,-1.19228759669889E+03, 4.30867658061468E+06]],
         /*n_i*/

         /*table 2.136*/
         [[0,0,0,0,1,2,2,2,2,3,3,3,4,4,5,5,8,8,10,12],
         /*I_i*/
          [-3,1,5,8,8,-4,-1,4,5,-8,4,8,-6,6,-2,1,-8,-2,-5,-8],
         /*J_i*/
          [-5.25597995024633E-10,5.83441305228407E+03,-1.34778968457925E+16,1.18973500934212E+25,
                   -1.59096490904708E+26, -3.15839902302021E-07,4.96212197158239E+02,3.27777227273171E+18,
                   -5.27114657850696E+21,2.10017506281863E-17, 7.05106224399834E+20,-2.66713136106469E+30,
                   -1.45370512554562E-08,1.49333917053130E+27,-1.49795620287641E+07, -3.81881906271100E+15,
                   7.24660165585797E-05,-9.37808169550193E+13,5.14411468376383E+09,-8.28198594040141E+04]],
         /*n_i*/

         /*table 2.137*/
         [[-8,-6,-5,-5,-4,-4,-4,-3,-3,-3,-2,-1,0,1,2,3,3,6,6,6,6,8,8],
         /*I_i*/
          [3,6,6,8,5,6,8,-2,5,6,2,-6,3,1,6,-6,-2,-6,-5,-4,-1,-8,-4],
         /*J_i*/
          [2.4400789229065E-11,-4.6305743033124E+06,7.28803274777712E+09,3.2777630285886E+15,
                   -1.1059817011841E+09, -3.2389991572996E+12,9.2381400702325E+15,8.4225008041371E-13,
                   6.6322143624551E+11,-1.6717018667214E+14, 2.5374935870139E+03,-8.1973155961052E-21,
                   3.2838058789066E+11,-6.2500479117154E+07,8.0319795746202E+20, -2.0439701133835E-11,
                   -3.7839104705594E+03,9.7287654593862E-03,1.5435572168146E+01,-3.7396286292864E+03,
                   -6.8285901137457E+10,-2.4848801561454E-04,3.9453604949707E+06]]
         /*n_i*/
         ]; // end SpecificVolume_coeff

    //table 2.103 & table 2.129
    //arrary contains alphabets a~z which assists the implement of array table_2_103 
    immutable char[] _subregion_char=['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];
    //a char represents the subregion. e.g. 'a' represents sub region 3a.
    char SubRegion;
    //index of SubRegion in _subregion_char[]
    int subregion_i;
    immutable double[9][26] table_2_103 =
        [/*[v_star,p_star,T_star,N,a,b,c,d,e]*/
         /*a*/ [0.0024,100e6,760,30,0.085,0.817,1,1,1],
         /*b*/ [0.0041,100e6,860,32,0.28,0.779,1,1,1],
         /*c*/ [0.0022,40e6,690,35,0.259,0.903,1,1,1],
         /*d*/ [0.0029,40e6,690,38,0.559,0.939,1,1,4],
         /*e*/ [0.0032,40e6,710,29,0.587,0.918,1,1,1],
         /*f*/ [0.0064, 40e6,730,42,0.587,0.891,0.5,1,4],
         /*g*/ [0.0027,25e6,660,38,0.872,0.971,1,1,4],
         /*h*/ [0.0032,25e6,660,29,0.898,0.983,1,1,4],
         /*i*/ [0.0041,25e6,660,42,0.91,0.984,0.5,1,4],
         /*j*/ [0.0054,25e6,670,29,0.875,0.964,0.5,1,4],
         /*k*/ [0.0077,25e6,680,34,0.802,0.935,1,1,1],
         /*l*/ [0.0026,24e6,650,43,0.908,0.989,1,1,4],
         /*m*/ [0.0028,23e6,650,40,1,0.997,1,0.25,1],
         /*n*/ [0.0031,23e6,650,39,0.976,0.997],
         /*o*/ [0.0034,23e6,650,24,0.974,0.996,0.5,1,1],
         /*p*/ [0.0041,23e6,650,27,0.972,0.997,0.5,1,1],
         /*q*/ [0.0022,23e6,650,24,0.848,0.983,1,1,4],
         /*r*/ [0.0054,23e6,650,27,0.874,0.982,1,1,1],
         /*s*/ [0.0022,21e6,640,29,0.886,0.99,1,1,4],
         /*t*/ [0.0088,20e6,650,33,0.803,1.02,1,1,1],
         /*u*/ [0.0026,23e6,650,38,0.902,0.988,1,1,1],
         /*v*/ [0.0031,23e6,650,39,0.96,0.995,1,1,1],
         /*w*/ [0.0039,23e6,650,35,0.959,0.995,1,1,4],
         /*x*/ [0.0049,23e6,650,36,0.91,0.988,1,1,1],
         /*y*/ [0.0031,22e6,650,20,0.996,0.994,1,1,4],
         /*z*/ [0.0038,22e6,650,23,0.993,0.994,1,1,4] ];

    //table 2.100 & table 2.126
    immutable double[][2][11] table_2_100_126 =
        [ /*[I_i,n_i]*/
         /*ab*/ [[0,1,2,-1,-2],
                 [0.154793642129415e4,-0.187661219490113e3,0.213144632222113e2,
                  -0.191887498864292e4,0.918419702359447e3]],
         /*cd*/ [[0,1,2,3],
                 [0.585276966696349e3,0.278233532206915e1,-0.127283549295878e-1, 0.159090746562729e-3]],
         /*gh*/ [[0,1,2,3,4],
                 [-0.249284240900418e5,0.428143584791546e4,-0.269029173140130e3,
                  0.751608051114157e1,-0.787105249910383e-1]],
         /*ij*/ [[0,1,2,3,4],
                 [0.584814781649163e3,-0.616179320924617,0.260763050899562,
                  -0.587071076864459e-2,0.515308185433082e-4]],
         /*jk*/ [[0,1,2,3,4],
                 [0.617229772068439e3,-0.770600270141675e1,0.697072596851896,
                  -0.157391839848015e-1,0.137897492684194e-3]],
         /*mn*/ [[0,1,2,3],
                 [0.535339483742384e3,0.761978122720128e1,-0.158365725441648,0.192871054508108e-2]],
         /*op*/ [[0,1,2,-1,-2],
                 [0.969461372400213e3,-0.332500170441278e3,0.642859598466067e2,
                  0.773845935768222e3,-0.152313732937084e4]],
         /*qu*/ [[0,1,2,3],
                 [0.565603648239126e3,0.529062258221222e1,-0.102020639611016,0.122240301070145e-2]],
         /*rx*/ [[0,1,2,3],
                 [0.584561202520006e3,-0.102961025163669e1,0.243293362700452,-0.294905044740799e-2]],
         /*uv*/ [[0,1,2,3],
                 [0.528199646263062e3,0.890579602135307e1,-0.222814134903755,0.286791682263697e-2]],
         /*wx*/ [[0,1,2,-1,-2],
                 [0.728052609145380e1,0.973505869861952e2,0.147370491183191e2,0.329196213998375e3,
                  0.873371668682417e3]] ];

    //backward equations
    void eqn_2_68()
    {
        //intermediate properties in eqn 2.68
        v_star = table_2_103[subregion_i][0];
        p_star = table_2_103[subregion_i][1];
        T_star = table_2_103[subregion_i][2];
        _N = table_2_103[subregion_i][3];
        _a = table_2_103[subregion_i][4];
        _b = table_2_103[subregion_i][5];
        _c = table_2_103[subregion_i][6];
        _d = table_2_103[subregion_i][7];
        _e = table_2_103[subregion_i][8];
        pi = p/p_star;theta = T/T_star;

        //specific table containing constants implemented in eqn 2.68 
        //according to the subRegion                                            
        immutable double[][] _SpecificVolume_coeff=SpecificVolume_coeff[subregion_i];
        double sum=0;
        // [TODO] Jason, I think that the following summation loop would be neater as
        // foreach (_i; 0 .. _N) { ... }
        // There would be no need to define _i outside of the loop, also.
        foreach (_i; 0 .. to!int(_N))
        {
            sum += _SpecificVolume_coeff[2][_i]
                *(((pi-_a)^^_c)^^_SpecificVolume_coeff[0][_i])
                *(((theta-_b)^^_d)^^_SpecificVolume_coeff[1][_i]);
        }
        v = v_star*(sum^^_e);
    }

    void eqn_2_69()
    {
        //intermediate properties in eqn 2.69
        v_star = table_2_103[13][0];
        p_star = table_2_103[13][1];
        T_star = table_2_103[13][2];
        _N = table_2_103[13][3];
        _a = table_2_103[13][4];
        _b = table_2_103[13][5];
        pi = p/p_star;
        theta = T/T_star;
        double sum=0;
        foreach (_i; 0 .. to!int(_N))
        {
            sum += SpecificVolume_coeff[13][2][_i]
                *(pi-_a)^^SpecificVolume_coeff[13][0][_i]
                *(theta-_b)^^SpecificVolume_coeff[13][1][_i];
        }
        v = v_star*(exp(sum));
    }

    //subregion-boundary equations
    double eqn_2_65(int i)
    {
        double _pi = p/1e6;
        double _sum=0;
        foreach (_i; 0 .. to!int(table_2_100_126[i][0].length))
        {
            _sum += table_2_100_126[i][1][_i] * _pi^^table_2_100_126[i][0][_i];
        }
        return _sum;
    }

    double eqn_2_66(int i)
    {
        double _pi = p/1e6;
        double _sum=0;
        foreach (_i; 0 .. to!int(table_2_100_126[i][0].length))
        {
            _sum += table_2_100_126[i][1][_i] * (log(_pi))^^table_2_100_126[i][0][_i];
        }
        return _sum;    
    }

    double eqn_2_67()
    {
        return 3.727888004*(p/1e6-22.064)+647.096;
    }

    void get_subregion()
    //determination of subregion, refer to table 2.101 for more details
    {
        /*
         *subregion boundaries can be obtained using the combination of 
         *table_2_100_106, eqn_2_65, eqn_2_66, eqn_2_67
         *refer to (Wagner. W,2008) for more information 
         */
        if((40e6<p && p<=100e6) && T<=eqn_2_66(0))
            {SubRegion = 'a';}

        else if((40e6<p && p<=100e6) && T>eqn_2_66(0))
            {SubRegion = 'b';}
                
        else if(((19.00881189e6<p && p<=40e6)&&T<= eqn_2_65(1))||
                ((16.52916425e6<p && p<=19.00881189e6)&&T<=get_Ts(p)))
            {SubRegion = 'c';}

        else if((25e6<p && p<=40e6)&&(eqn_2_65(1)<T&&T<=eqn_2_66(0)))
            {SubRegion = 'd';}

        else if((25e6<p && p<=40e6)&&(eqn_2_66(0)<T&&T<=eqn_2_67))
            {SubRegion = 'e';}

        else if((25e6<p && p<=40e6)&&T>eqn_2_67)
            {SubRegion = 'f';}

        else if((23.5e6<p && p<=25e6)&&(eqn_2_65(1)<T && T<=eqn_2_65(2)))
            {SubRegion = 'g';}

        else if((23e6<p && p<=25e6)&&(eqn_2_65(2)<T && T<=eqn_2_67))
            {SubRegion = 'h';}

        else if((23e6<p && p<=25e6)&&(eqn_2_67<T && T<=eqn_2_65(3)))
            {SubRegion = 'i';}

        else if((22.5e6<p && p<=25e6)&&(eqn_2_65(3)<T && T<=eqn_2_65(4)))
            {SubRegion = 'j';}

        else if((20.5e6<p && p<=25e6)&&T>eqn_2_65(4))
            {SubRegion = 'k';}

        else if((22.5e6<p && p<=23.5e6)&&(eqn_2_65(1)<T && T<=eqn_2_65(2)))
            {SubRegion = 'l';}

        else if(22.5e6<p && p<=23e6){
            if(eqn_2_65(2)<T && T<=eqn_2_65(5))
                {SubRegion = 'm';}
            else if((eqn_2_65(5)<T && T<=eqn_2_67))
                {SubRegion = 'n';}
            else if(eqn_2_67<T && T<=eqn_2_66(6))
                {SubRegion = 'o';}
            else if(eqn_2_66(6)<T && T<=eqn_2_65(3))
                {SubRegion = 'p';}
        }
        else if((21.04336732e6<p && p<=22.5e6)&&(eqn_2_65(1)<T && T<=eqn_2_65(7)))
            {SubRegion = 'q';}
        else if((21.04336732e6<p && p<=22.5e6) && (eqn_2_65(8)<T && T<=eqn_2_65(4))
                ||((20.5e6<p && p<=21.04336732e6) && (get_Ts(p)<T && T<=eqn_2_65(4))))
            {SubRegion = 'r';}
        else if((19.00881189e6<p && p<=21.04336732e6) && (eqn_2_65(1)<T && T<= get_Ts(p)))
            {SubRegion = 's';}
        else if((16.52916425e6<p && p<=20.5e6)&&T>get_Ts(p))
            {SubRegion = 't';}

        //table 2.127, determine region 3u~3z
        else if(p<=p_c) {
            if(21.93161551e6<p && T<=get_Ts(p)) {
                if(eqn_2_65(7)<T && T<=eqn_2_65(9)) {
                    SubRegion = 'u';
                    quality=0;
                }
                else if (T>eqn_2_65(9)) {
                    SubRegion = 'y';
                    quality=0;
                }
                else if ((21.04336732e6<p && p<=21.93161551e6) && T>eqn_2_65(7) && T<=get_Ts(p)) {
                    SubRegion ='u';
                    quality=0;
                }
                else if(21.90096265e6<p && T>=get_Ts(p)) {
                    if(T<=eqn_2_66(10)) {
                        SubRegion = 'z';
                    }
                    else if(eqn_2_66(10)<T && T<=eqn_2_65(8)) {
                        SubRegion = 'x';
                    }
                }
                else if((21.04336732e6<p && p<=21.90096265e6) && T<=eqn_2_65(8) && T>=get_Ts(p)) {
                    SubRegion = 'x';
                }
            }
            else if(p>p_c) {
                if((p_c<p && p<=22.5e6) && (eqn_2_65(7)<T && T<=eqn_2_65(9))) {
                    SubRegion = 'u';
                }
                else if ((p_c<p && p<=22.5e6) && (eqn_2_66(10)<T && T<=eqn_2_65(8))) {
                    SubRegion = 'x';
                }
                else if(p_c<p && p<=22.11e6) {
                    if(eqn_2_67<T && T<=eqn_2_66(10)) { 
                        SubRegion = 'z';
                    }
                    else if(eqn_2_65(9)<T && T<=eqn_2_67) {
                        SubRegion = 'y';
                    }
                }
                        
                else if (22.11e6<p && p<=22.5e6) {
                    if (eqn_2_67<T && T<=eqn_2_66(10)) {
                        SubRegion = 'w';
                    }
                    else if (eqn_2_65(9)<T && T<=eqn_2_67) {
                        SubRegion = 'v';
                    }
                }
            }
        }
    }
        
    this(double _p, double _T ) {       
        p = _p; T = _T;
        init;   
    }

    void init() {
        /*
         * contains all properties and coefficients before using basic equation to 
         * calculate thermaldynamic properties.
         */
        get_subregion;
        
        //(Region3 backward equation) preparation to proceed calculation of specific volume  
        foreach(int i,element;_subregion_char) {
            if (element==SubRegion) {
                subregion_i=i;
            }
        }
        //for subregion 3n
        if (subregion_i==13) {
            eqn_2_69;
        }
        //for subregion 3a~3z apart from 3n
        else {
            eqn_2_68;
        }
        
        //assign density with the obtained specific volume
        rho=1/v;

        //(Region3 basic equation) preparation to proceed calculation of thermo properties 
        delta = rho/rho_c;tau = T_c/T;
        //summation container for for loop
        double sum=0,sum_tau=0,sum_delta=0,sum_tautau=0,sum_deltadelta=0,sum_deltatau=0;
        //table 2.17
        foreach (i; 0 .. 40) {
            sum += table_2_15[i][2]*delta^^table_2_15[i][0]*tau^^table_2_15[i][1];
            sum_tau += table_2_15[i][2]*delta^^table_2_15[i][0]
                *tau^^(table_2_15[i][1]-1)*table_2_15[i][1];
            sum_delta += table_2_15[i][2]*delta^^(table_2_15[i][0]-1)
                *tau^^table_2_15[i][1]*table_2_15[i][0];
            sum_tautau += table_2_15[i][2]*delta^^table_2_15[i][0]*tau^^(table_2_15[i][1]-2)
                *table_2_15[i][1]*(table_2_15[i][1]-1);
            sum_deltadelta += table_2_15[i][2]*delta^^(table_2_15[i][0]-2)*tau^^table_2_15[i][1]
                *table_2_15[i][0]*(table_2_15[i][0]-1);
            sum_deltatau += table_2_15[i][2]*delta^^(table_2_15[i][0]-1)*table_2_15[i][0]
                *tau^^(table_2_15[i][1]-1)*table_2_15[i][1];
        }
        phi = table_2_15[0][2]*log(delta)+sum;
        phi_tau = sum_tau;
        phi_delta = table_2_15[0][2]/delta+sum_delta;
        phi_tautau = sum_tautau;
        phi_deltadelta = -table_2_15[0][2]*delta^^-2+sum_deltadelta;
        phi_deltatau = sum_deltatau;
    }

public:
    double SpecificVolume() 
    {
        return v;
    }
    //(Region3 basic equation)table 2.16
    double SpecificEnthalpy()
    {
        return R*T*(tau*phi_tau+delta*phi_delta);
    }
    double SpecificInternalEnergy()
    {
        return R*T*(tau*phi_tau);
    }
    double SpecificEntropy()
    {
        return R*(tau*phi_tau-phi);
    }
    double SpecificIsobaricHeatCapacity()
    {
        return R*(-tau^^2*phi_tautau+((delta*phi_delta-delta*tau*phi_deltatau)^^2)
                  /(2*delta*phi_delta+delta^^2*phi_deltadelta));
    }
    double SpecificIsochoricHeatCapacity()
    {
        return R*(-tau^^2*phi_tautau);
    }
    double SoundSpeed()
    {
        return sqrt(R*T*(2*delta*phi_delta+delta^^2*phi_deltadelta
                         -((delta*phi_delta-delta*tau*phi_deltatau)^^2)/(tau^^2*phi_tautau)));
    }
    double IsobaricCubicExpansionCoefficient()
    {
        return (phi_delta-tau*phi_deltatau)/(2*phi_delta+delta*phi_deltadelta)/T;
    }
    double IsothermalCompressibility()
    {
        return (1/(2*delta*phi_delta+delta^^2*phi_deltadelta))/(rho*R*T);
    }
}//end struct Region3

//---------------------------------------------------------------------------------
//PART 1.5. IAPWS-Region1 formulation struct
//---------------------------------------------------------------------------------
struct Region1 {
private:
    //state property
    double p,T; // pressure & temperature 
    //intermediate properties
    double pi,tau; 
    //derivatives of intermediate properties
    ///refer to table 2.4 for more details 
    double gamma=0;
    double gamma_tau=0;
    double gamma_pi=0;
    double gamma_tautau=0;
    double gamma_pipi=0;
    double gamma_pitau=0;

    //Implementing tables 
    immutable double[34][3] table_2_2=
        [/*[I],[J],[n]]*/
         [0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,2,3,3,3,4,4,4,5,8,8,21,23,29,30,31,32],
         [-2,-1,0,1,2,3,4,5,-9,-7,-1,0,1,3,-3,0,1,3,17,-4,0,6,-5,-2,10,-8,-11,-6,-29,-31,-38,-39,-40,-41],
         [1.463297121316700E-01,-8.454818716911400E-01,-3.756360367204000E+00,3.385516916838500E+00,
          -9.579196338787200E-01,1.577203851322800E-01,-1.661641719950100E-02,8.121462998356800E-04,
          2.831908012380400E-04,-6.070630156587400E-04,-1.899006821841900E-02,-3.252974877050500E-02,
          -2.184171717541400E-02,-5.283835796993000E-05,-4.718432107326700E-04,-3.000178079302600E-04,
          4.766139390698700E-05,-4.414184533084600E-06,-7.269499629759400E-16,-3.167964484505400E-05,
          -2.827079798531200E-06,-8.520512812010300E-10,-2.242528190800000E-06,-6.517122289560100E-07,
          -1.434172993792400E-13,-4.051699686011700E-07,-1.273430174164100E-09,-1.742487123063400E-10,
          -6.876213129553100E-19,1.447830782852100E-20,2.633578166279500E-23,-1.194762264007100E-23,
          1.822809458140400E-24,-9.353708729245800E-26]
         ];

    this(double _p, double _T)
    {
        p = _p; T = _T;
        init;
    }

    void init()
    {
        /*
         * contains all the properties and coefficient required to proceed calculation in 
         * Region 1.
         */     
        pi=p/(16.53E6);
        tau=1386/T;

        //table 2.4, derivatives of gamma
        foreach (i; 0 .. 34) {
            gamma += table_2_2[2][i]*(7.1-pi)^^table_2_2[0][i]*(tau-1.222)^^table_2_2[1][i];
            gamma_tau += table_2_2[2][i]*(7.1-pi)^^table_2_2[0][i]*(tau-1.222)^^
                (table_2_2[1][i]-1)*table_2_2[1][i];
            gamma_pi += -1*table_2_2[2][i]*table_2_2[0][i]*(7.1-pi)^^(table_2_2[0][i]-1)
                *(tau-1.222)^^table_2_2[1][i];          
            gamma_tautau += table_2_2[2][i]*(7.1-pi)^^table_2_2[0][i]*(tau-1.222)^^
                (table_2_2[1][i]-2)*table_2_2[1][i]*(table_2_2[1][i]-1);
            gamma_pipi += table_2_2[2][i]*(7.1-pi)^^(table_2_2[0][i]-2)*(tau-1.222)
                ^^table_2_2[1][i]*table_2_2[0][i]*(table_2_2[0][i]-1);
            gamma_pitau += -1*table_2_2[2][i]*(7.1-pi)^^(table_2_2[0][i]-1)*
                (tau-1.222)^^(table_2_2[1][i]-1)*table_2_2[0][i]*table_2_2[1][i];
        }       
    }

public:
    //table 2.3 
    double SpecificVolume()
    {
        return R*T/p*pi*gamma_pi;
    } 
    double SpecificEnthalpy()
    {
        return tau*gamma_tau*R*T;
    }  
    double SpecificInternalEnergy()
    {
        return SpecificEnthalpy - SpecificVolume*p;
    } 
    double SpecificEntropy()
    {
        return (tau*gamma_tau-gamma)*R;
    }  
    double SpecificIsobaricHeatCapacity()
    {
        return (-1*tau^^2*gamma_tautau)*R;
    } 
    double SpecificIsochoricHeatCapacity()
    {
        return SpecificIsobaricHeatCapacity
            +((gamma_pi-tau*gamma_pitau)^^2/gamma_pipi)*R;
    }
    double SoundSpeed()
    {
        double _a,_b,_c,_d;
        _a = (gamma_pi-tau*gamma_pitau)^^2/(tau^^2*gamma_tautau);
        return sqrt((gamma_pi^^2/(_a-gamma_pipi))*R*T);
    }
    double IsobaricCubicExpansionCoefficient()
    {
        return (1-tau*gamma_pitau/gamma_pi)/T;
    }
    double IsothermalCompressibility(){
        return (-1*pi*gamma_pipi/gamma_pi)/p;
    }
}//end struct Region1

//-------------------------------------------------------------------------------
// PART 1.6. IAPWS base formulation struct
//-------------------------------------------------------------------------------

struct IAPWS{
    /*
     *  Unless specify, otherwise:
     *  Reference:
     *   Wanger, W., & Kretzschmar, H.(2008). International Steam Tables.
     *   Berlin, Heidelberg: Springer Berlin Heidelberg.
     */
private:
  
    //tables for calculating dynamic viscosity:
    immutable double[4] table_3_1=[0.167752e-1,0.220462e-1,0.6366564e-2,-0.241605e-2];
    immutable double[3][21] table_3_2=
        [/*[I_i,J_i,n_i]*/
         [0,0,0.520094],[0,1,0.850895e-1],[0,2,-0.108374e1],[0,3,-0.289555],[1,0,0.222531],
         /*5*/ [1,1,0.999115],[1,2,1.88797],[1,3,0.126613e1],[1,5,0.120573],[2,0,-0.281378],
         [2,1,-0.906851],[2,2,-0.772479],[2,3,-0.489837],[2,4,-0.25704],[3,0,0.161913],
         [3,1,0.257399],[4,0,-0.325372e-1],[4,3,0.698452e-1],[5,4,0.872102e-2],
         [6,3,-0.435673e-2],[6,5,-0.593264e-3] ];
        
    //table for calculating thermal conductivity:
    immutable double[5] table_1=[2.443221E-03,1.323095000E-02,6.770357000E-03,-3.454586000E-03,4.096266000E-04];
    immutable double[6][5] table_2=
        [[1.60397357,-0.646013523,0.111443906,0.102997357,-0.0504123634,0.00609859258],
         [2.33771842,-2.78843778,1.53616167,-0.463045512,0.0832827019,-0.00719201245],
         [2.19650529,-4.54580785,3.55777244,-1.40944978,0.275418278,-0.0205938816],
         [-1.21051378,1.60812989,-0.621178141,0.0716373224,0,0],
         [-2.7203370,4.57586331,-3.18369245,1.1168348,-0.19268305,0.012913842]];
    immutable double[5][6] table_6=
        [[6.53786807199516,6.52717759281799,5.35500529896124,1.55225959906681,1.11999926419994],
         [-5.61149954923348,-6.30816983387575,-3.96415689925446,0.464621290821181,0.595748562571649],
         [3.39624167361325,8.08379285492595,8.91990208918795,8.93237374861479,9.8895256507892],
         [-2.27492629730878,-9.82240510197603,-12.033872950579,-11.0321960061126,-10.325505114704],
         [10.2631854662709,12.1358413791395,9.19494865194302,6.1678099993336,4.66861294457414],
         [1.97815050331519,-5.54349664571295,-2.16866274479712,-0.965458722086812,-0.503243546373828]];

        //determine which region the input (p,T) lies in
    string set_region(double p, double T, double quality)
    {
        string region;
        //(p,T) lies in region 2
        if(((0<T)&&(T<623.15))&&(p<=get_ps(T)) ||
           ((623.15<=T&&T<=863.15) &&(get_pb23(T)>=p))||((863.15<=T)&&(T<=1073.15))) {
            if(quality==1.0 || quality==-1) {
                region = "2";
            }
            else if(quality>=0 && quality<1) {
                if(abs(p-get_ps(T))/get_ps(T)<5e-4) {//acceptable percentage uncertainty (International Steam Table, Fig. 2.30)
                    region = "12m";
                }
                else {
                    string msg;
                    msg ~= format("Warning in function: %s:\n", __FUNCTION__);
                    msg ~= format(
                                  "    Input state is not a gas or g-v mixture but in IAPWS-Region 2 vapour phase.\n");
                    msg ~= format("             Pressure adjusted from %.2f to %.2f", p, get_ps(T)); 
                    writeln(msg);
                    region = "12m";
                }       
            }
        } 
        //(p,T) lies in region 5
        else if((1073.15<=T && T<=2273.15) && p<=50e6) {
            region = "5";
        }
        //(p,T) lies in region 3
        else if((623.15<=T&&T<=863.15)&&(get_pb23(T)<=p)) {
            if(quality>0 && quality<1.0) {
                string msg;
                msg ~= format("Warning in function: %s:\n", __FUNCTION__);
                msg ~= format("    Input state is in IAPWS-Region 3 mixture phase.\n"); 
                writeln(msg);
                region = "3m"; //liquid-vapour mixture
            }
            else {
                region = "3"; 
            }
        }
        //(p,T) lies in region 1
        else if(((273.15<=T&&T<=623.15)&&(get_ps(T)<p&&p<=100E6))) {
            if(quality==0 || quality ==-1) {
                region = "1";   
            }
            else if(0<quality && quality<=1.0) {
                if(abs(p-get_ps(T))/get_ps(T)<5e-4) {//acceptable percentage uncertainty (International Steam Table, Fig. 2.30)
                    region = "12m";
                }
                else {
                    string msg;
                    msg ~= format("Warning in function: %s:\n", __FUNCTION__);
                    msg ~= format(
                                  "    Input state is not a liquid state but in IAPWS-Region 1 liquid phase.\n");
                    msg ~= format("             Pressure adjusted from %.2f to %.2f", p, get_ps(T)); 
                    writeln(msg);
                    region = "12m";
                }       
            }
        }
        else if(p!=p || T!=T) { //when p or T is Nan
        }
        else {
            string msg;
            msg ~= format("Warning in function: %s:\n", __FUNCTION__);
            msg ~= format("    Input state is out of the valid range for IAPWS formulations of state.\n");
            msg ~= format("        Input pressure %.2f [Pa] and temperature %.2f [K]\n", p, T);
            msg ~= format("        please check http://www.iapws.org/relguide/ for more information."); 
            writeln(msg);
        }
        return region;
    }//end set_region

public:
    
    double SpecificVolume(double p, double T, double quality)
    {
        string region = set_region(p, T, quality);
        double v;
        switch (region) {
        case "2":
            Region2 _IAPWS = Region2(p,T,quality);
            v = _IAPWS.SpecificVolume; 
            break;       
            
        case "5":
            Region5 _IAPWS = Region5(p,T); 
            v = _IAPWS.SpecificVolume; 
            break;
            
        case "3":
            Region3 _IAPWS = Region3(p,T);
            v = _IAPWS.SpecificVolume; 
            break;
            
        case "1":
            Region1 _IAPWS = Region1(p,T);
            v = _IAPWS.SpecificVolume; 
            break;
            
        case "3m":
            //slightly adjust the pressure value to make sure it is in 
            //the desired phase
            Region3 _l = Region3(p+100,T); //liquid phase
            Region3 _v = Region3(p-100,T); // vapour phase
            v = quality*_v.SpecificVolume - (quality-1)*_l.SpecificVolume; 
            break;
            
        case "12m":
            Region1 _l = Region1(get_ps(T),T); //liquid phase
            Region2 _v = Region2(get_ps(T),T,-1); //vapour phase
            v = quality * (_v.SpecificVolume - _l.SpecificVolume) + _l.SpecificVolume; 
            break;
            
        default:
            break;
        }//end switch
        return v; 
    }

    double Density(double p, double T, double quality)
    {
        return 1./SpecificVolume(p,T,quality);
    }

    double SoundSpeed(double p, double T, double quality)
    {
        string region = set_region(p, T, quality);
        double a;
        switch (region) {
        case "2":
            Region2 _IAPWS = Region2(p,T,quality);
            a = _IAPWS.SoundSpeed; 
            break;       
            
        case "5":
            Region5 _IAPWS = Region5(p,T); 
            a = _IAPWS.SoundSpeed; 
            break;
            
        case "3":
            Region3 _IAPWS = Region3(p,T);
            a = _IAPWS.SoundSpeed; 
            break;
            
        case "1":
            Region1 _IAPWS = Region1(p,T);
            a = _IAPWS.SoundSpeed; 
            break;
            
        case "3m":
            //slightly adjust the pressure value to make sure it is in 
            //the desired phase
            Region3 _l = Region3(p+100,T); //liquid phase
            Region3 _v = Region3(p-100,T); // vapour phase
            a = quality*_v.SoundSpeed - (quality-1)*_l.SoundSpeed; 
            break;
            
        case "12m":
            Region1 _l = Region1(get_ps(T),T); //liquid phase
            Region2 _v = Region2(get_ps(T),T,-1); //vapour phase
            a = quality * (_v.SoundSpeed - _l.SoundSpeed) + _l.SoundSpeed; 
            break;
            
        default:
            break;
        }//end switch 
        return a;
    }

    double SpecificIsochoricHeatCapacity(double p, double T, double quality)
    {
        string region = set_region(p, T, quality);
        double Cv;
        switch (region) {
        case "2":
            Region2 _IAPWS = Region2(p,T,quality);
            Cv = _IAPWS.SpecificIsochoricHeatCapacity; 
            break;       
            
        case "5":
            Region5 _IAPWS = Region5(p,T);
            Cv = _IAPWS.SpecificIsochoricHeatCapacity; 
            break;
            
        case "3":
            Region3 _IAPWS = Region3(p,T); 
            Cv = _IAPWS.SpecificIsochoricHeatCapacity; 
            break;
            
        case "1":
            Region1 _IAPWS = Region1(p,T);
            Cv = _IAPWS.SpecificIsochoricHeatCapacity; 
            break;
            
        case "3m":
            //slightly adjust the pressure value to make sure it is in 
            //the desired phase
            Region3 _l = Region3(p+100,T); //liquid phase
            Region3 _v = Region3(p-100,T); // vapour phase
            Cv = quality*_v.SpecificIsochoricHeatCapacity - (quality-1)*_l.SpecificIsochoricHeatCapacity; 
            break;
            
        case "12m":
            Region1 _l = Region1(get_ps(T),T); //liquid phase
            Region2 _v = Region2(get_ps(T),T,-1); //vapour phase
            Cv = quality * (_v.SpecificIsochoricHeatCapacity 
                            - _l.SpecificIsochoricHeatCapacity)
                + _l.SpecificIsochoricHeatCapacity; 
            break;
            
        default:
            break;
        }//end switch
        return Cv; 
    }

    double SpecificIsobaricHeatCapacity(double p, double T, double quality)
    {
        string region = set_region(p, T, quality);
        double Cp;
        switch (region) {
        case "2":
            Region2 _IAPWS = Region2(p,T,quality);
            Cp = _IAPWS.SpecificIsobaricHeatCapacity; 
            break;       
                                
        case "5":
            Region5 _IAPWS = Region5(p,T);
            Cp = _IAPWS.SpecificIsobaricHeatCapacity; 
            break;
            
        case "3":
            Region3 _IAPWS = Region3(p,T);
            Cp = _IAPWS.SpecificIsobaricHeatCapacity; 
            break;
            
        case "1":
            Region1 _IAPWS = Region1(p,T);
            Cp = _IAPWS.SpecificIsobaricHeatCapacity;
            break;
            
        case "3m":
            //slightly adjust the pressure value to make sure it is in 
            //the desired phase
            Region3 _l = Region3(p+100,T); //liquid phase
            Region3 _v = Region3(p-100,T); // vapour phase
            Cp = quality*_v.SpecificIsobaricHeatCapacity - (quality-1)*_l.SpecificIsobaricHeatCapacity; 
            break;
            
        case "12m":
            Region1 _l = Region1(get_ps(T),T); //liquid phase
            Region2 _v = Region2(get_ps(T),T,-1); //vapour phase
            Cp = quality * (_v.SpecificIsobaricHeatCapacity
                            - _l.SpecificIsobaricHeatCapacity)
                + _l.SpecificIsobaricHeatCapacity;
            break;
            
        default:
            break;
        }//end switch
        return Cp; 
    }

    double SpecificInternalEnergy(double p, double T, double quality)
    {
        string region = set_region(p, T, quality);
        double u;
        switch (region) {
        case "2":
            Region2 _IAPWS = Region2(p,T,quality);
            u = _IAPWS.SpecificInternalEnergy; 
            break;       
            
        case "5":
            Region5 _IAPWS = Region5(p,T);
            u = _IAPWS.SpecificInternalEnergy; 
            break;
            
        case "3":
            Region3 _IAPWS = Region3(p,T);
            u = _IAPWS.SpecificInternalEnergy; 
            break;
            
        case "1":
            Region1 _IAPWS = Region1(p,T);
            u = _IAPWS.SpecificInternalEnergy;
            break;
            
        case "3m":
            //slightly adjust the pressure value to make sure it is in 
            //the desired phase
            Region3 _l = Region3(p+100,T); //liquid phase
            Region3 _v = Region3(p-100,T); // vapour phase
            u = quality*_v.SpecificInternalEnergy - (quality-1)*_l.SpecificInternalEnergy; 
            break;
            
        case "12m":
            Region1 _l = Region1(get_ps(T),T); //liquid phase
            Region2 _v = Region2(get_ps(T),T,-1); //vapour phase
            u = quality * (_v.SpecificInternalEnergy - _l.SpecificInternalEnergy)
                + _l.SpecificInternalEnergy;
            break;
            
        default:
            break;
        }//end switch
        return u;
    }

    double SpecificEnthalpy(double p, double T, double quality)
    {
        string region = set_region(p, T, quality);
        double h;
        switch (region) {
        case "2":
            Region2 _IAPWS = Region2(p,T,quality);
            h = _IAPWS.SpecificEnthalpy; 
            break;       
            
        case "5":
            Region5 _IAPWS = Region5(p,T);
            h = _IAPWS.SpecificEnthalpy; 
            break;
            
        case "3":
            Region3 _IAPWS = Region3(p,T);
            h = _IAPWS.SpecificEnthalpy; 
            break;
            
        case "1":
            Region1 _IAPWS = Region1(p,T);
            h = _IAPWS.SpecificEnthalpy;
            break;
            
        case "3m":
            //slightly adjust the pressure value to make sure it is in 
            //the desired phase
            Region3 _l = Region3(p+100,T); //liquid phase
            Region3 _v = Region3(p-100,T); // vapour phase
            h = quality*_v.SpecificEnthalpy - (quality-1)*_l.SpecificEnthalpy; 
            break;
            
        case "12m":
            Region1 _l = Region1(get_ps(T),T); //liquid phase
            Region2 _v = Region2(get_ps(T),T,-1); //vapour phase
            h = quality * (_v.SpecificEnthalpy - _l.SpecificEnthalpy)
                + _l.SpecificEnthalpy;
            break;
            
        default:
            break;
        }//end switch
        return h; 
    }
    
    double SpecificEntropy(double p, double T, double quality)
    {
        string region = set_region(p, T, quality);
        double s;
        switch (region) {
        case "2":
            Region2 _IAPWS = Region2(p,T,quality);
            s = _IAPWS.SpecificEntropy; 
            break;       
            
        case "5":
            Region5 _IAPWS = Region5(p,T);
            s = _IAPWS.SpecificEntropy; 
            break;
            
        case "3":
            Region3 _IAPWS = Region3(p,T);
            s = _IAPWS.SpecificEntropy; 
            break;
            
        case "1":
            Region1 _IAPWS = Region1(p,T);
            s = _IAPWS.SpecificEntropy;
            break;
            
        case "3m":
            //slightly adjust the pressure value to make sure it is in 
            //the desired phase
            Region3 _l = Region3(p+100,T); //liquid phase
            Region3 _v = Region3(p-100,T); // vapour phase
            s = quality*_v.SpecificEntropy - (quality-1)*_l.SpecificEntropy; 
            break;
            
        case "12m":
            Region1 _l = Region1(get_ps(T),T); //liquid phase
            Region2 _v = Region2(get_ps(T),T,-1); //vapour phase
            s = quality * (_v.SpecificEntropy - _l.SpecificEntropy)
                + _l.SpecificEntropy;
            break;
            
        default:
            break;
        }//end switch
        return s; 
    }
   
    double IsobaricCubicExpansionCoefficient(double p, double T, double quality)
    {
        string region = set_region(p, T, quality);
        double alpha_v;
        switch (region) {
        case "2":
            Region2 _IAPWS = Region2(p,T,quality);
            alpha_v = _IAPWS.IsobaricCubicExpansionCoefficient; 
            break;       
            
        case "5":
            Region5 _IAPWS = Region5(p,T);
            alpha_v = _IAPWS.IsobaricCubicExpansionCoefficient; 
            break;
            
        case "3":
            Region3 _IAPWS = Region3(p,T);
            alpha_v = _IAPWS.IsobaricCubicExpansionCoefficient; 
            break;
            
        case "1":
            Region1 _IAPWS = Region1(p,T);
            alpha_v = _IAPWS.IsobaricCubicExpansionCoefficient;
            break;
            
        case "3m":
            //slightly adjust the pressure value to make sure it is in 
            //the desired phase
            Region3 _l = Region3(p+100,T); //liquid phase
            Region3 _v = Region3(p-100,T); // vapour phase
            alpha_v = quality*_v.IsobaricCubicExpansionCoefficient - 
                (quality-1)*_l.IsobaricCubicExpansionCoefficient; 
            break;
            
        case "12m":
            Region1 _l = Region1(get_ps(T),T); //liquid phase
            Region2 _v = Region2(get_ps(T),T,-1); //vapour phase
            alpha_v = quality * (_v.IsobaricCubicExpansionCoefficient 
                                 - _l.IsobaricCubicExpansionCoefficient)
                + _l.IsobaricCubicExpansionCoefficient;
            break;
            
        default:
            break;
        }//end switch
        return alpha_v; 
    }  
    
    double IsothermalCompressibility(double p, double T, double quality)
    {
        string region = set_region(p, T, quality);
        double kappa_T;
        switch (region) {
        case "2":
            Region2 _IAPWS = Region2(p,T,quality);
            kappa_T = _IAPWS.IsothermalCompressibility; 
            break;       
            
        case "5":
            Region5 _IAPWS = Region5(p,T);
            kappa_T = _IAPWS.IsothermalCompressibility; 
            break;
            
        case "3":
            Region3 _IAPWS = Region3(p,T);
            kappa_T = _IAPWS.IsothermalCompressibility; 
            break;
            
        case "1":
            Region1 _IAPWS = Region1(p,T);
            kappa_T = _IAPWS.IsothermalCompressibility;
            break;
            
        case "3m":
            //slightly adjust the pressure value to make sure it is in 
            //the desired phase
            Region3 _l = Region3(p+100,T); //liquid phase
            Region3 _v = Region3(p-100,T); // vapour phase
            kappa_T = quality*_v.IsothermalCompressibility - 
                (quality-1)*_l.IsothermalCompressibility; 
            break;
            
        case "12m":
            Region1 _l = Region1(get_ps(T),T); //liquid phase
            Region2 _v = Region2(get_ps(T),T,-1); //vapour phase
            kappa_T = quality * (_v.IsothermalCompressibility
                                 - _l.IsothermalCompressibility)
                + _l.IsothermalCompressibility;
            break;
            
        default:
            break;
        }//end switch
        return kappa_T; 
    }

    //function to compute dynamic viscosity but not in IAPWS-IF97
    //parameter: rho, T
    //valid in: 273.15K <= T <= 1173.15K and p <= 100 MPa
    double DynamicViscosity(double p, double T, double quality)
    {   
        //intermediate properties
        double rho = Density(p,T,quality);
        double delta=rho/rho_c;
        double theta=T/T_c;
        double psi_0,psi_1;
        double sum=0;
        
        //eqn 3.2
        foreach (i;0 .. 4) {
            sum += table_3_1[i]*theta^^(-i);
        }
        psi_0 = theta^^0.5*(sum)^^-1;

        //eqn 3.3
        sum=0;
        foreach (i; 0 .. 21) {
            sum += table_3_2[i][2]*(delta-1)^^(table_3_2[i][0])
                *((theta^^-1-1)^^(table_3_2[i][1])); 
        }
        psi_1 = exp(delta*sum);

        //eqn 3.1
        return 1e-6*psi_0*psi_1;
    }
        
    double ThermalConductivity(double p, double T, double quality)
    {
        /*      
         * contains everything implementing from IAPWS R15-11 for industrial use
         * reference:
         *      IAPWS (2011). Release on the IAPWS Formulaiton 2011 for the Thermal 
         *      Conductivity of Ordinary Water Substance,
         *      available at the IAPWS website http://www.iapws.org 
         * 
         * parameters: p, T, rho, mu
         * valid in: 273.15K <= T <= 1173.15K and p <= 100 MPa;
         */
        
        //intermediate properties
        double lambda_bar,lambda_0,lambda_1,lambda_2,dvdp_T,drhodp_T,zeta_T,
            zeta_TR,xi,delta_x, y, Z;
        ///eqn 7 ~ eqn 13
        double T_bar = T/T_c;
        double p_bar = p/p_c;
        double v = SpecificVolume(p,T,quality);
        double rho = Density(p,T,quality);
        double rho_bar = rho/rho_c;
        double mu = DynamicViscosity(p,T,quality);
        double mu_bar = mu/mu_c;
        double Cp = SpecificIsobaricHeatCapacity(p,T,quality);
        double Cp_bar = Cp/R;
        double Cv = SpecificIsochoricHeatCapacity(p,T,quality);
        double kappa = Cp/Cv;
        double kappa_T = IsothermalCompressibility(p,T,quality);
        ///dummy sum container  
        double sum=0;
        double sum_1=0;

        //eqn 16
        foreach (i; 0 .. 5) {
            sum += table_1[i]/(T_bar^^i);
        } 
        lambda_0 = sqrt(T_bar)/sum;
        //eqn 17
        sum=0;
        foreach (i; 0 .. 5) {
            foreach (j; 0 .. 6) {
                sum_1 += table_2[i][j]*(rho_bar-1)^^j;
            }
            sum += ((T_bar^^-1-1)^^i)*sum_1;sum_1=0;
        }
        lambda_1 = exp(rho_bar*sum);    

        /*
         *lambda_2, critical enhancement of thermal conductivity
         *      refer to http://www.twt.mpei.ac.ru/mcs/worksheets/iapws/wspTCPT.xmcd    
         *      for more details
         */
        if((Cp_bar<0)||(Cp_bar>1e13)) {
            Cp_bar = 1e13;Cp = Cp_bar*R;kappa = Cp/Cv;
        }       
        dvdp_T = -kappa_T*v;
        drhodp_T = rho^^2*-dvdp_T; 
        zeta_T = drhodp_T*p_c/rho_c;
        ///eqn 26
        int _j=-1;
        do{
            if(rho_bar<=0.310559006){_j=0;}
            if((0.310559006<rho_bar)&&(rho_bar<=0.776397516)){_j=1;}
            if((0.776397516<rho_bar)&&(rho_bar<=1.242236025)){_j=2;}
            if((1.242236025<rho_bar)&&(rho_bar<=1.863354037)){_j=3;}
            if(rho_bar>1.863354037){_j=4;}
        }while(_j==-1);
        sum=0;foreach(i; 0 .. 6){sum += table_6[i][_j]*rho_bar^^i;}
        zeta_TR = 1/sum; 
        ///eqn 23
        delta_x = rho_bar*(zeta_T-zeta_TR*1.5/T_bar); 
        if(delta_x<0){delta_x=0;}
        ///eqn 22
        xi = 0.13*(delta_x/0.06)^^(0.63/1.239); 
        if((xi<0)||(xi>1e13)){xi=1e13;}
        ///eqn 20
        y = xi/0.4;
        ///eqn 19
        if(y<1.2e-7){Z = 0;}
        else{Z = (2/PI/y)*((1-1/kappa)*atan(y)+y/kappa
                           -(1-exp(-1/(1/y+y^^2/3/(rho_bar^^2)))));}
        ///eqn 18 
        lambda_2 = 177.8514*rho_bar*Cp_bar*T_bar*Z/mu_bar;
                
        //eqn 15
        lambda_bar = lambda_0*lambda_1+lambda_2;
        //eqn 10
        return lambda_bar * k_c;
    } // end ThermalConductivity 
} // end struct IAPWS

//---------------------------------------------------------------------------------
//PART 2.1. Get (p,T) from (rho,u) using 2D Newton-Raphson Method
//                      (only valid for IAPWS Region 2)
//                      (inspired by fill-in functions in gas_model.d)
//---------------------------------------------------------------------------------

//local function to automatically check and fix the update (p,T) to ensure it is 
//in either Region 2 or Region 5 
void good_pT(ref double p, ref double T)
{
    if(T<273.15){T = 273.15; p = get_ps(T);}
    else if((273.15<T && T<=623.15) && p>get_ps(T) )
        {
            p = get_ps(T);
        }
    else if((623.15<T && T<=863.15) && p>get_pb23(T)) 
        {
            p = get_pb23(T);
        }
    else if((863.15<T && T<=1073.15) && p>100e6)
        {
            p = 100e6;
        }
    else if((1073.15<T && T<=2273.15) && p>50e6)
        {
            p = 50e6;
        }
    else if(T>2273.15){T=2273.15;}
}

double[] getpT_from_rhou(double rho, double u)
{ 
    //local thermal update method for (rho,u)
    //a guess of p & T is iterated on update_thermo_from_pT using 
    //the  Newton-Raphson method.
    
    double dp, p_old, p_new, T_old, T_old_1, T_new, dT;
    double dp_sign, dT_sign;
    double Cv_eff, R_eff, u_old, u_new, rho_old, rho_new;
    double frho_old, fu_old, frho_new, fu_new;
    double dfrho_dp, dfu_dp, dfrho_dT, dfu_dT, det;
    int converged, count;
    
    immutable MAX_RELATIVE_STEP = 0.1;
    immutable MAX_STEPS = 300;
    
    // When using single-sided finite-differences on the
    // curve-fit EOS functions, we really cannot expect 
    // much more than 0.1% tolerance here.
    // However, we want a tighter tolerance so that the starting values
    // don't get shifted noticeably (according to gas_model.d).
    
    double fu_tol = 1.0e-6 * u;
    double frho_tol = 1.0e-6 * rho;
    double frho_tol_fail = 0.02 * rho;
    double fu_tol_fail = 0.02 * u;
    
    // Get an idea of the gas properties by calling the pT
    // equation of state with some dummy values for pressure
    // and thermal temperature. the iteration start from vapour phase
    if(rho<=5 && (1900e3<=u && u<=2700e3))
        {
            //when the input (rho,u) is in the low-p-low-T region
            //initial guess closer to this region is required 
            T_old = 273.15; 
            p_old = get_ps(T_old); 
        }
    else 
        {
            //input (rho,u) is possibly in IAPWS region2
            p_old = 1.0e4;  
            T_old = 523.15; 
        }
    auto _IAPWS = new IAPWS(); 
    
    u_old = _IAPWS.SpecificInternalEnergy(p_old,T_old,1);
    rho_old =  _IAPWS.Density(p_old,T_old,1);
    R_eff = p_old / ( rho_old * u);
    T_old_1 = 1.01*T_old;
    
    good_pT(p_old,T_old_1);
    dT = T_old_1 - T_old;
    try { u_new = _IAPWS.SpecificInternalEnergy(p_old,T_old_1,1);
        rho_new = _IAPWS.Density(p_old,T_old_1,1);}
    catch (Exception caughtException) {
        string msg;
        msg ~= format("Starting guess at iteration 1 failed in %s\n", __FUNCTION__);
        msg ~= format("Excpetion message from update_thermo_from_rhou() was:\n\n");
        msg ~= to!string(caughtException);
        throw new Exception(msg);
    }
    Cv_eff = (u_new - u_old) / dT;
    // Now, get a better guess for the appropriate pressure and
    // thermal temperature.
    p_old = R_eff * (rho- rho_new) * T_old_1 + p_old;    
    T_old = (u - u_new)/Cv_eff + T_old_1;
    // Evaluate state variables using this guess.
    good_pT(p_old,T_old);
    try { u_new = _IAPWS.SpecificInternalEnergy(p_old,T_old,1);
        rho_new = _IAPWS.Density(p_old,T_old,1);}
    catch (Exception caughtException) {
        string msg;
        msg ~= format("Starting guess at iteration 2 failed in %s\n", __FUNCTION__);
        msg ~= format("Excpetion message from update_thermo_from_rhou() was:\n\n");
        msg ~= to!string(caughtException);
        throw new Exception(msg);
    }
    frho_old = rho - rho_new;
    fu_old = u - u_new;
    
    // Update the guess using Newton iterations
    // with the partial derivatives being estimated
    // via finite differences.
    converged = (fabs(frho_old) < frho_tol) && (fabs(fu_old) < fu_tol);
    count = 0;
    while ( !converged && count < MAX_STEPS ) {
        // Perturb first dimension to get derivatives.
        p_new = p_old * 1.0001;
        T_new = T_old;
        good_pT(p_new,T_new);
        try { u_new = _IAPWS.SpecificInternalEnergy(p_new, T_new,1);
            rho_new = _IAPWS.Density(p_new, T_new,1);}
        catch (Exception caughtException) {
            string msg;
            msg ~= format("Iteration %s failed at call A in %s\n", count, __FUNCTION__); 
            msg ~= format("Excpetion message from update_thermo_from_rhou() was:\n\n");
            msg ~= to!string(caughtException);
            throw new Exception(msg);
        }
        frho_new = rho - rho_new;
        fu_new = u - u_new;
        dfrho_dp = (frho_new - frho_old) / (p_new - p_old);
        dfu_dp = (fu_new - fu_old) / (p_new - p_old);
        
        // Perturb other dimension to get derivatives.
        p_new = p_old;
        T_new = T_old * 1.0001;
        good_pT(p_new,T_new);
        try { u_new = _IAPWS.SpecificInternalEnergy(p_new, T_new, 1);
            rho_new = _IAPWS.Density(p_new, T_new,1);}
        catch (Exception caughtException) {
            string msg;
            msg ~= format("Iteration %s failed at call B in %", count, __FUNCTION__);
            msg ~= format("Excpetion message from update_thermo_from_rhou() was:\n\n");
            msg ~= to!string(caughtException);
            throw new Exception(msg);
        }
        frho_new = rho - rho_new;
        fu_new = u - u_new;
        dfrho_dT = (frho_new - frho_old) / (T_new - T_old);
        dfu_dT = (fu_new - fu_old) / (T_new - T_old);
        //Jacobian matrix determinant 
        det = dfrho_dp * dfu_dT - dfu_dp * dfrho_dT;
        if( fabs(det) < 1.0e-12 ) {
            string msg;
            msg ~= format("Error in function %s\n", __FUNCTION__);
            msg ~= format("    Nearly zero determinant, det = ", det);
            throw new Exception(msg);
        }
        dp = (-dfu_dT * frho_old + dfrho_dT * fu_old) / det;
        dT = (dfu_dp * frho_old - dfrho_dp * fu_old) / det;
        if( fabs(dp) > MAX_RELATIVE_STEP * p_old ) {
            // move a little toward the goal 
            dp_sign = (dp > 0.0 ? 1.0 : -1.0);
            dp = dp_sign * MAX_RELATIVE_STEP * p_old;
        } 
        if( fabs(dT) > MAX_RELATIVE_STEP * T_old ) {
            // move a little toward the goal
            dT_sign = (dT > 0.0 ? 1.0 : -1.0);
            dT = dT_sign * MAX_RELATIVE_STEP * T_old;
        } 
        p_old += dp;
        T_old += dT;
        // Make sure of consistent thermo state.
        good_pT(p_old,T_old);
        try { u_new = _IAPWS.SpecificInternalEnergy(p_old, T_old,1);
            rho_new = _IAPWS.Density(p_old, T_old,1);}
        catch (Exception caughtException) {
            string msg;
            msg ~= format("Iteration %s failed in %s\n", count, __FUNCTION__);
            msg ~= format("Excpetion message from update_thermo_from_rhou() was:\n\n");
            msg ~= to!string(caughtException);
            throw new Exception(msg);
        }
        // Prepare for next iteration.
        frho_old = rho - rho_new;
        fu_old = u - u_new;
        converged = (fabs(frho_old) < frho_tol) && (fabs(fu_old) < fu_tol);
        ++count;
        
    } // end while 
    
    if ( count >= MAX_STEPS ) {
        string msg;
        msg ~= format("Warning in function: %s:\n", __FUNCTION__);
        msg ~= format("    Iterations did not converge.\n");
        msg ~= format("    Last iterated p=%.10s, T=%.10s\n",p_old, T_old);
        msg ~= format("    frho_old = %g, fu_old = %g\n", frho_old, fu_old);
        msg ~= format("    rho = %.10s, u=%.5s\n", rho, u); 
        writeln(msg);
        
    }
    
    if( (fabs(frho_old) > frho_tol_fail) || (fabs(fu_old) > fu_tol_fail) ) {
        string msg;
        msg ~= format("Error in function: %s:\n", __FUNCTION__);
        msg ~= format("    Iterations failed badly.\n");
        msg ~= format("    rho = %.10s, u, %.5s\n", rho, u); 
        msg ~= format("    frho_old = %g, fu_old = %g\n", frho_old, fu_old);
        throw new Exception(msg);
    }
    
    return [p_old, T_old];
}//end getpT_from_rhou

//---------------------------------------------------------------------------------
//PART 2.2. Get T from (p,s) using 1D Newton-Raphson Method
//                      (only valid for IAPWS Region 2)
//                      (inspired by the fill-in functions in gas_model.d)
//---------------------------------------------------------------------------------

//local function to automatically check and alter the update T to ensure it is 
//in either Region 2 or Region 5 while p is fixed
void good_T(double p, ref double T)
{
    if(T<273.15){T = 273.15;}
    else if((273.15<T && T<=623.15) && p>get_ps(T) )
        {
            while(p>get_ps(T))
                {
                    T = get_Ts(p)+0.01;
                }
        }
    else if((623.15<T && T<=863.15) && p>get_pb23(T)) 
        {
            while(p>get_pb23(T))
                {
                    T*=1.001;
                }
        }
    else if((1073.15<T && T<=2273.15) && p>50e6)
        {
            T = 1073.15;
        }
    else if(T>2273.15){T=2273.15;}
}

double getT_from_ps(double p, double T0, double s)
{
    double T_old, T_new;
    double f0, f_old, f_new;
    double df, dT;
    int converged, count;
    
    immutable MAX_RELATIVE_STEP = 0.1;
    immutable MAX_STEPS = 200;
    
    //similar tolerence as in the fill-in functions
    double f_tol = 1.0e-6*s;
    double f_tol_fail = 0.02*s;
    
    //target function to minimize during the iteration
    auto _IAPWS = new IAPWS();
    double f_T(double T)
    {
        return _IAPWS.SpecificEntropy(p,T,1)-s;
    }
    
    // assuming T0 is good enough to be the first guess
    try{f0 = f_T(T0);}
    catch (Exception caughtException) {
        string msg;
        msg ~= format("Starting guess at iteration 1 failed in %s\n", __FUNCTION__);
        msg ~= format("Excpetion message from update_thermo_from_ps() was:\n\n");
        msg ~= to!string(caughtException);
        throw new Exception(msg);
    }
    
    // second guess on T
    T_old = 1.01*T0;
    good_T(p,T_old);
    try{f_old = f_T(T_old);}
    catch (Exception caughtException) {
        string msg;
        msg ~= format("Starting guess at iteration 1 failed in %s\n", __FUNCTION__);
        msg ~= format("Excpetion message from update_thermo_from_ps() was:\n\n");
        msg ~= to!string(caughtException);
        throw new Exception(msg);
    }
    df = f_old - f0;
    dT = T_old - T0;
    
    //update the guess using 1D Newton method with the 
    //partial derivatives calculated using F.D.
    converged = (fabs(f_old) < f_tol);
    count =0;
    while(!converged && count < MAX_STEPS)
        {
            T_new = - f_old/df*dT + T_old;
            good_T(p,T_new);
            
            //update target function
            try{f_new = f_T(T_new);}
            catch (Exception caughtException) {
                string msg;
                msg ~= format("Starting guess at iteration 1 failed in %s\n", __FUNCTION__);
                msg ~= format("Excpetion message from update_thermo_from_ps() was:\n\n");
                msg ~= to!string(caughtException);
                throw new Exception(msg);
            }
            //prepare for next iteration
            df = f_new - f_old;
            dT = T_new - T_old;
            T_old = T_new;
            f_old = f_new;
            converged = (fabs(f_old) < f_tol);
            ++count;
        } //end while
    
    if(count >= MAX_STEPS)
        {
            string msg;
            msg ~= format("Warning in function: %s:\n", __FUNCTION__);
            msg ~= format("    Iterations did not converge.\n");
            msg ~= format("    Last iterated p=%.10s, T=%.10s\n",p, T_old);
            msg ~= format("    update entropy %.10s\n", _IAPWS.SpecificEntropy(p,T_old,1));
            msg ~= format("    given entropy %.10s\n", s); 
            writeln(msg);
        }
    if(fabs(f_old) > f_tol_fail)
        {
            string msg;
            msg ~= format("Warning in function: %s:\n", __FUNCTION__);
            msg ~= format("    Iterations failed badly.\n");
            msg ~= format("    Last iterated p=%.10s, T=%.10s\n",p, T_old);
            msg ~= format("    update entropy %.10s\n", _IAPWS.SpecificEntropy(p,T_old,1));
            msg ~= format("    given entropy %.10s\n", s); 
            writeln(msg);
        }
    
    return T_old;
}//end getT_from_ps

//---------------------------------------------------------------------------------
//PART 3. Steam class inheritting from GasModel class
//---------------------------------------------------------------------------------

class Steam: GasModel{
private:
    auto _IAPWS = new IAPWS();
public:
    
    this()
    {
        _n_species = 1;
        _n_modes = 0;
        _species_names ~= "H2O";
        _mol_masses ~= 0.018015257;// value from International Steam Table (Wanger W.,2008)
        create_species_reverse_lookup();        
        version(complex_numbers) {
            throw new Error("Do not use with complex numbers.");
        }
    } // end constructor

    override string toString() const
    {
        return "Steam(From the IAPWS releases R7-97, R12-08 and R15-11)";
    }

    override void update_thermo_from_pT(GasState Q) 
    {
        Q.rho = _IAPWS.Density(Q.p.re, Q.T.re, Q.quality.re);
        Q.a = _IAPWS.SoundSpeed(Q.p.re, Q.T.re, Q.quality.re);
        Q.u = _IAPWS.SpecificInternalEnergy(Q.p.re, Q.T.re, Q.quality.re);
        Q.mu = _IAPWS.DynamicViscosity(Q.p.re, Q.T.re, Q.quality.re);
        Q.k = _IAPWS.ThermalConductivity(Q.p.re, Q.T.re, Q.quality.re);
    }

    override void update_thermo_from_rhou(GasState Q)
    {
        if (Q.quality == 1) {
            double[2] pT = getpT_from_rhou(Q.rho.re, Q.u.re);
            Q.p = pT[0];
            Q.T = pT[1];
            Q.a = _IAPWS.SoundSpeed(Q.p.re, Q.T.re, Q.quality.re);
            Q.mu = _IAPWS.DynamicViscosity(Q.p.re, Q.T.re, Q.quality.re);
            Q.k = _IAPWS.ThermalConductivity(Q.p.re, Q.T.re, Q.quality.re); 
        }
        else {
            assert(0, "Not in gas IAPWS-Region2, implement me");
        }
    } 
    
    override void update_thermo_from_rhoT(GasState Q)
    {
        assert(0, "Implement me");
    }
    
    override void update_thermo_from_rhop(GasState Q)
    {
        assert(0, "Implement me");
    }
    
    override void update_thermo_from_ps(GasState Q, number s)
    { 
        if(Q.quality==1) {
            Q.T = getT_from_ps(Q.p.re, Q.T.re, s.re);
            Q.a = _IAPWS.SoundSpeed(Q.p.re, Q.T.re, Q.quality.re);
            Q.u = _IAPWS.SpecificInternalEnergy(Q.p.re, Q.T.re, Q.quality.re);
            Q.mu = _IAPWS.DynamicViscosity(Q.p.re, Q.T.re, Q.quality.re);
            Q.k = _IAPWS.ThermalConductivity(Q.p.re, Q.T.re, Q.quality.re);
        }
        else {
            assert(0, "Not in IAPWS-Region2, implement me");
        }
    }
    
    override void update_thermo_from_hs(GasState Q, number h, number s)
    {
        assert(0, "Implement me");
    }
    
    override void update_sound_speed(GasState Q)
    {
        Q.a = _IAPWS.SoundSpeed(Q.p.re, Q.T.re, Q.quality.re);
    }

    override void update_trans_coeffs(GasState Q)
    {
        Q.mu = _IAPWS.DynamicViscosity(Q.p.re, Q.T.re, Q.quality.re);
        Q.k = _IAPWS.ThermalConductivity(Q.p.re, Q.T.re, Q.quality.re);
    }

    override number dudT_const_v(in GasState Q)
    {
        return to!number(_IAPWS.SpecificIsochoricHeatCapacity(Q.p.re, Q.T.re, Q.quality.re));
    }
    override number dhdT_const_p(in GasState Q)
    {
        return to!number(_IAPWS.SpecificIsobaricHeatCapacity(Q.p.re, Q.T.re, Q.quality.re));
    }
    override number dpdrho_const_T(in GasState Q)
    {
        //no defined function for this
        return to!number(0.0);
    }
    override number gas_constant(in GasState Q)
    {
        return to!number(461.526); /// specific gas constant[J/kg/K]
    }
    override number internal_energy(in GasState Q)
    {
        return to!number(_IAPWS.SpecificInternalEnergy(Q.p.re, Q.T.re, Q.quality.re));
    }
    override number enthalpy(in GasState Q)
    {
        return to!number(_IAPWS.SpecificEnthalpy(Q.p.re, Q.T.re, Q.quality.re));
    }
    override number entropy(in GasState Q)
    {
        return to!number(_IAPWS.SpecificEntropy(Q.p.re, Q.T.re, Q.quality.re));
    }
} // end class Steam

version(steam_test){
    import std.stdio;
    import util.msg_service;

    int main(){
        auto gm = new Steam();
        auto gd = new GasState(1, 0);
        gd.p = 1.0e5;
        gd.T = 600.0;
        gd.massf[0] = 1.0;
        gd.quality = 1.0;
        assert(approxEqual(gm.R(gd), 461.5, 1.0e-4), failedUnitTest());
        assert(gm.n_modes == 0, failedUnitTest());
        assert(gm.n_species == 1, failedUnitTest());
        assert(approxEqual(gd.p, 1.0e5, 1.0e-6), failedUnitTest());
        assert(approxEqual(gd.T, 600.0, 1.0e-6), failedUnitTest());
        assert(approxEqual(gd.massf[0], 1.0, 1.0e-6), failedUnitTest());

        gm.update_thermo_from_pT(gd);
        gm.update_sound_speed(gd);

        //check update_thermo_from_rhou()
        /*
        *Reference:
        *               Zittau´s Fluid Property Calculator 
        *               (https://web1.hszg.de/thermo_fpc/index.php)
        *               University of Applied Sciences faculty of Mechanical
        *               Engineering
        *               Department of Technical Thermodynamics
        */
        //-1. (p,T) in Region 2
        gd.rho = 5.0;
        gd.u = 2.8e6;
        gm.update_thermo_from_rhou(gd);
        assert(approxEqual(1298110.3, gd.p, 1.0e-6*gd.p), failedUnitTest());
        assert(approxEqual(580.408, gd.T, 1.0e-6*gd.T), failedUnitTest());
        //-2. (p,T) in low-p-low-T region
        gd.rho = 0.00670708;
        gd.u = 2445304.2;
        gm.update_thermo_from_rhou(gd);
        assert(approxEqual(1000, gd.p, 1.0e-6*gd.p), failedUnitTest());
        assert(approxEqual(323.15, gd.T, 1.0e-6*gd.T), failedUnitTest());

        /*
        *Reference:
        *        Wanger, W., & Kretzschmar, H.(2008). International Steam Tables.
        *        Berlin, Heidelberg: Springer Berlin Heidelberg.
        *        table 2.11
        */
        gd.p = 0.0035e6;
        gd.T = 300;
        gm.update_thermo_from_pT(gd);
        assert(approxEqual(1./0.394913866e2,gd.rho, 1.0e-6),failedUnitTest());
        assert(approxEqual(0.241169160e7, gm.internal_energy(gd), 1.0e1), failedUnitTest());
        assert(approxEqual(0.254991145e7, gm.enthalpy(gd), 1.0e1), failedUnitTest());
        assert(approxEqual(0.852238967e4, gm.entropy(gd), 1.0e-2), failedUnitTest());
        assert(approxEqual(0.191300162e4, gm.dhdT_const_p(gd), 1.0e-2), failedUnitTest());
        assert(approxEqual(0.144132662e4, gm.dudT_const_v(gd), 1.0e-2), failedUnitTest());
        gm.update_sound_speed(gd);
        assert(approxEqual(0.427920172e3, gd.a, 1.0e-3), failedUnitTest());
        //check update_thermo_from_ps(gd)
        double s = gm.entropy(gd);
        gd.T = 380;
        gm.update_thermo_from_ps(gd,s);
        assert(approxEqual(300, gd.T, 1.0e-6*gd.T),failedUnitTest());
        /*
        *Reference:
        *        IAPWS release R15-11 table 8. 
        */
        gd.p = 0.3e6;
        gd.T = 650;
        gm.update_trans_coeffs(gd);
        assert(approxEqual(0.522311024e-1, gd.k, 1.0e-7), failedUnitTest());
        assert(approxEqual(0.234877453e-4, gd.mu, 1.0e-9), failedUnitTest());
        return 0;
    }
}
