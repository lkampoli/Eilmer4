# sod.test
#
# This exercises the LuaFnVolume class for user-defined geometry
# in a structured-grid example.
#
# PJ, 2015-02-24 adapted from back.test

package require tcltest 2.0
namespace import ::tcltest::*
configure -verbose {start body error}

test prepare-gas-model {Prepare gas model.} -body {
    exec prep-gas ideal-air.inp ideal-air-gas-model.lua > LOGFILE_PREP_GAS
} -result {} -returnCodes {0}

test run-preprocessor {Run the preprocessing stage.} -body {
    exec e4shared --prep --job=sod > LOGFILE_PREP
} -result {} -returnCodes {0}

test run-simulation {Run the parallel simulation code.} -body {
    exec e4shared --run --job=sod --verbosity=1 --max-cpus=1 > LOGFILE_MAIN
} -result {} -returnCodes {0}

test number-of-steps {Iteration of the final block in a certain number of steps.} -body {
    set fp [open LOGFILE_MAIN r]
    set contents [read $fp]
    close $fp
    set final_steps 0
    foreach line [split $contents "\n"] {
	if {[string first "final-t=" $line] >= 0} {
	    set final_steps [lindex [split $line] 1]
	}
    }
    expr abs($final_steps - 107) < 3
} -result {1}

test post-shock-region {Post-shock gas conditions.} -body {
    set rho_ref 0.2647
    set p_ref 30.2e3
    set T_ref 398.0
    set velx_ref 293.0
    if { [catch {exec e4shared --post --job=sod --tindx-plot=last --probe=0.8,0.025,0.025 } results] } {
        puts "postprocessing probe command failed"
        puts $results
	set rho 0
	set p 0
	set T 0
	set velx 0
    } else {
	# Skip through the output, looking for the interesting data.
	# There will be a header line, followed by the actual data values.
	set found 0
	foreach line [split $results "\n"] {
	    if {[string first "pos.x" $line] >= 0} {
		set found 1
		continue; # skip to following line
	    }
	    if {$found} {
		set tokens [split [string trim $line]]
		# puts "tokens= $tokens"
		set rho [lindex $tokens 4]; # remember that index starts at 0
		set velx [lindex $tokens 5]
		set p [lindex $tokens 8]
		set T [lindex $tokens 19]
		break; # We have our data so stop looking.
	    }
	}
	# puts "rho=$rho p=$p T=$T velx=$velx"
    }
    # The differences with respect to the reference values should be small. 
    list [expr abs($rho - $rho_ref)/$rho_ref < 1.0e-2] \
    	 [expr abs($p - $p_ref)/$p_ref < 1.0e-2] \
    	 [expr abs($T - $T_ref)/$T_ref < 1.0e-2] \
    	 [expr abs($velx - $velx_ref)/$velx_ref < 1.0e-2]
} -result {1 1 1 1}

test expanded-driver-region {Expanded driver gas conditions.} -body {
    set rho_ref 0.4271
    set p_ref 30.2e3
    set T_ref 247.0
    set velx_ref 293.0
    if { [catch {exec e4shared --post --job=sod --tindx-plot=last --probe=0.6,0.025,0.025 } results] } {
        puts "postprocessing probe command failed"
        puts $results
	set rho 0
	set p 0
	set T 0
	set velx 0
    } else {
	# Skip through the output, looking for the interesting data.
	# There will be a header line, followed by the actual data values.
	set found 0
	foreach line [split $results "\n"] {
	    if {[string first "pos.x" $line] >= 0} {
		set found 1
		continue; # skip to following line
	    }
	    if {$found} {
		set tokens [split [string trim $line]]
		# puts "tokens= $tokens"
		set rho [lindex $tokens 4]; # remember that index starts at 0
		set velx [lindex $tokens 5]
		set p [lindex $tokens 8]
		set T [lindex $tokens 19]
		break; # We have our data so stop looking.
	    }
	}
	# puts "rho=$rho p=$p T=$T velx=$velx"
    }
    # The differences with respect to the reference values should be small. 
    list [expr abs($rho - $rho_ref)/$rho_ref < 1.0e-2] \
    	 [expr abs($p - $p_ref)/$p_ref < 1.0e-2] \
    	 [expr abs($T - $T_ref)/$T_ref < 1.0e-2] \
    	 [expr abs($velx - $velx_ref)/$velx_ref < 1.0e-2]
} -result {1 1 1 1}

cleanupTests
