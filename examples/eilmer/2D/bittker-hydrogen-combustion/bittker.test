# bittker.test
# Functional test for reacting inviscid flow in a pipe.
#
# This exercises the finite-rate chemistry coupled to the gas dynamics.
#
# PJ, 21-Jun-2011, adapted to Eilmer4 18-Mar-2016
# Note that later tests below depend on earlier ones,
# just as we shouldn't do.  Should fix this some day.

package require tcltest 2.0
namespace import ::tcltest::*
configure -verbose {start body error}

test prepare-gas-model {Prepare gas model.} -body {
    exec prep-gas combusting-species.inp h2-o2-n2-9sp.lua > LOGFILE_PREP_GAS
} -result {} -returnCodes {0}

test prepare-chemistry {Prepare chemical reaction scheme.} -body {
    exec prep-chem h2-o2-n2-9sp.lua Bittker-Scullin.lua h2-o2-n2-9sp-18r.lua > LOGFILE_PREP_CHEM
} -result {} -returnCodes {0}

test run-preprocessor {Run the preprocessing stage.} -body {
    exec e4shared --job=bittker --prep > LOGFILE_PREP
} -result {} -returnCodes {0}

test run-simulation {Run the shared-memory simulation code.} -body {
    exec e4shared --run --job=bittker --verbosity=1 --max-cpus=1 > LOGFILE_MAIN
} -result {} -returnCodes {0}

test combustion-products {Combustion should have produced water by the end of the duct.} -body {
    # The following values were extracted from the solution
    # as it was computed on PJ's computer 20-Mar-2016 for cfl_value = 0.5.
    set rho_ref 1.588144e-01
    set vx_ref 4.479598e+03
    set p_ref 1.498976e+05
    set T_ref 2485.2
    set massf_O_ref 1.477749e-02
    set massf_H2_ref 6.661693e-03
    set massf_H2O_ref 1.591853e-01
    # Probe the solution near the end of the duct
    # and pull a few values from the line of data
    # that is produced by the postprocessor.
    if { [catch {exec e4shared --post --job=bittker --tindx-plot=last --probe=0.098,0.05,0.0} results] } {
        puts "Flow-field-probing command failed"
        puts $results
	set rho 0
	set vx 0
	set p 0
	set T 0
	set massf_O   0
	set massf_H2  0
	set massf_H2O 0
    } else {
	# puts $results
	# Skip through the output, looking for the interesting data.
	# There will be a header line, followed by the actual data values.
	set found 0
	foreach line [split $results "\n"] {
	    if {[string first "#" $line] >= 0} {
		set found 1
		continue; # skip to following line
	    }
	    if {$found} {
		set tokens [split [string trim $line]]
		# puts "tokens= $tokens"
		set rho [lindex $tokens 4]
		set vx [lindex $tokens 5]
		set p [lindex $tokens 8]
		set T [lindex $tokens 28]
		set massf_O [lindex $tokens 17]
		set massf_H2 [lindex $tokens 21]
		set massf_H2O [lindex $tokens 22]
		# puts "rho= $rho p= $p T=$T massf O= $massf_O H2= $massf_H2 H2O= $massf_H2O"
		break; # We have our data so stop looking.
	    }
	}
    }
    # The difference with respect to the reference values should be small. 
    list [expr abs($rho - $rho_ref)/$rho_ref < 5.0e-3] \
    	 [expr abs($vx - $vx_ref)/$vx_ref < 5.0e-3] \
    	 [expr abs($p - $p_ref)/$p_ref < 5.0e-3] \
    	 [expr abs($T - $T_ref)/$T_ref < 1.0e-2] \
    	 [expr abs($massf_O - $massf_O_ref)/$massf_O_ref < 2.5e-2] \
    	 [expr abs($massf_H2 - $massf_H2_ref)/$massf_H2_ref < 2.5e-2] \
    	 [expr abs($massf_H2O - $massf_H2O_ref)/$massf_H2O_ref < 1.0e-2]
} -result {1 1 1 1 1 1 1}

cleanupTests
