# cone20-usg-su2.test
# Functional test for a conical (axisymmetric), inviscid flow.
#
# This exercises quite a few of the basic functions of the unstructured-grid code.
#
# PJ, 11-Jan-2011 (Eilmer4 port 2015-10-21, unstructured-grid 2015-12-21, su2 2016-11-13)
#
# Can be run manually with the command:
# $ tclsh cone20-usg.test
#
# Note that later tests below depend on earlier ones,
# just as we shouldn't do.  Should fix this some day.

package require tcltest 2.0
namespace import ::tcltest::*
configure -verbose {start body error}

test prepare-gas-model {Prepare gas model.} -body {
    exec prep-gas ideal-air.inp ideal-air-gas-model.lua > LOGFILE_PREP_GAS
} -result {} -returnCodes {0}

test run-preprocessor {Run the preprocessing stage.} -body {
    exec e4shared --prep --job=cone20 > LOGFILE_PREP
} -result {} -returnCodes {0}

test run-simulation {Run the shared-memory simulation code.} -body {
    exec e4shared --run --job=cone20 --verbosity=1 --max-cpus=4 > LOGFILE_MAIN
} -result {} -returnCodes {0}

test number-of-steps {The main simulation takes a certain number of steps.} -body {
    set fp [open LOGFILE_MAIN r]
    set contents [read $fp]
    close $fp
    set final_steps 0
    foreach line [split $contents "\n"] {
	if {[string first "final-t=" $line] >= 0} {
	    set final_steps [lindex [split $line] 1]
	}
    }
    list [expr abs($final_steps - 1641) < 3]
} -result {1}

test free-stream-flow {The flow in the second block, upstream of the shock.} -body {
    set a 0; set M 0; set p 0; set T 0
    if { [catch {exec e4shared --post --job=cone20 --tindx-plot=last --add-vars="mach" --probe=0.4,0.5,0.0 } results] } {
        puts "Flow-field-probing command failed"
        puts $results
    } else {
	# puts $results
	# Skip through the output, looking for the interesting data.
	# There will be a header line, followed by the actual data values.
	set found 0
	foreach line [split $results "\n"] {
	    if {[string first "pos.x" $line] >= 0} {
		set found 1
		continue; # skip to following line
	    }
	    if {$found} {
		set tokens [split [string trim $line]]
		# puts "tokens= $tokens"
		set a [lindex $tokens 9]
		set M [lindex $tokens 20]
		set p [lindex $tokens 8]
		set T [lindex $tokens 19]
		break; # We have our data so stop looking.
	    }
	}
    }
    list [expr abs($a - 666.0) < 1.0] [expr abs($M - 1.50) < 0.02] \
	[expr abs($p - 95.84e3) < 500] [expr abs($T - 1103.0) < 1.0]
} -result {1 1 1 1}

test pressure-on-cone-surface {The expected pressure on the cone surface.} -body {
    set p 0
    if { [catch {exec e4shared --post --job=cone20 --tindx-plot=last --probe=0.7,0.182,0.0 } results] } {
        puts "Flow-field-probing command failed"
        puts $results
    } else {
	# puts $results
	# Skip through the output, looking for the interesting data.
	# There will be a header line, followed by the actual data values.
	set found 0
	foreach line [split $results "\n"] {
	    if {[string first "pos.x" $line] >= 0} {
		set found 1
		continue; # skip to following line
	    }
	    if {$found} {
		set tokens [split [string trim $line]]
		# puts "tokens= $tokens"
		set p [lindex $tokens 8]
		break; # We have our data so stop looking.
	    }
	}
    }
    # The expected pressure coefficient in 0.387 = (p_cone_surface - p_inf)/q_inf
    set q_inf [expr 0.5 * 0.3029 * 1.0e6]; # dynamic pressure for free stream
    set p_cone_surface [expr 95.84e3 + 0.387 * $q_inf]
    # puts "p=$p, q_inf=$q_inf, p_cone_surface=$p_cone_surface"
    list [expr abs($p - $p_cone_surface) < 5.0e2]
} -result {1}

test shock-angle {The shock angle should be close to 49 degrees.} -body {
    set shock_angle 0
    set average_deviation 0
    if { [catch {exec e4shared --custom-post --script-file=estimate_shock_angle.lua} results] } {
        puts "specialized postprocessing command failed"
        puts $results
    } else {
	foreach line [split $results "\n"] {
	    if {[string first shock_angle_deg $line] >= 0} {
		set shock_angle [lindex [split $line] 1]
	    }
	    if {[string first average_deviation_metres $line] >= 0} {
		set average_deviation [lindex [split $line] 1]
	    }
	}
    }
    # The shock wave angle should be within 1 degree of expected
    # and average deviation of points should be less than 3mm (more lax than the structured grid). 
    list [expr abs($shock_angle - 49.547) < 1.0] [expr $average_deviation < 0.003]
} -result {1 1}

cleanupTests
