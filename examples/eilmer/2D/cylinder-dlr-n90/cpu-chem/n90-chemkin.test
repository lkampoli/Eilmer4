# n90.test
#
# This exercises the nonequilibrium thermochemistry with the flow of
# dissociating nitrogen over a cylinder.
#
# PJ, 2015-11-10

package require tcltest 2.0
namespace import ::tcltest::*
configure -verbose {start body error}

test prepare-gas-model {Prepare gas model and chemistry.} -body {
    exec chemkin2eilmer n2-dissociation.inp nitrogen-2sp.lua n2-dissociation.lua > LOGFILE_PREP_GAS_CHEM
} -result {} -returnCodes {0}

test prepare-chem-file {Prepare chemistry file.} -body {
    exec prep-chem nitrogen-2sp.lua n2-dissociation.lua e4-chem.lua > LOGFILE_PREP_CHEM
} -result {} -returnCodes {0}

test run-preprocessor {Run the preprocessing stage.} -body {
    exec e4shared --prep --job=n90 > LOGFILE_PREP
} -result {} -returnCodes {0}

test run-simulation {Run the parallel simulation code.} -body {
    exec e4shared --run --job=n90 --verbosity=1 --max-cpus=4 > LOGFILE_MAIN
} -result {} -returnCodes {0}

test number-of-steps {Iteration of the final block in a certain number of steps.} -body {
    set fp [open LOGFILE_MAIN r]
    set contents [read $fp]
    close $fp
    set final_steps 0
    foreach line [split $contents "\n"] {
	if {[string first "final-t=" $line] >= 0} {
	    set final_steps [lindex [split $line] 1]
	}
    }
    expr abs($final_steps - 3459) < 30
} -result {1}

test post-shock-state {Post-shock state along the stagnation line.} -body {
    # The following values were extracted from the solution
    # as it was computed on PJ's computer 2015-11-10.
    set rho_ref 1.899158e-02
    set velx_ref 6.843182e+02
    set p_ref 5.376321e+04
    set massf_N_ref 1.344658e-02
    set T_ref 9.411362e+03
    # Probe the solution near on the stagnation line downstream of the shock
    # and pull a few values from the line of data that is produced by the postprocessor.
    if { [catch {exec e4shared --post --job=n90 --tindx-plot=5 --probe=-0.010,0.0,0.0 } results] } {
        puts "postprocessing probe command failed"
        puts $results
	set rho 0
	set velx 0
	set p 0
	set T 0
	set massf_N 0
    } else {
	# Skip through the output, looking for the interesting data.
	# There will be a header line, followed by the actual data values.
	set found 0
	foreach line [split $results "\n"] {
	    if {[string first "pos.x" $line] >= 0} {
		set found 1
		continue; # skip to following line
	    }
	    if {$found} {
		set tokens [split [string trim $line]]
		# puts "tokens= $tokens"
		set rho [lindex $tokens 4]; # remember that index starts at 0
		set velx [lindex $tokens 5]
		set p [lindex $tokens 8]
		set massf_N [lindex $tokens 18]
		set T [lindex $tokens 21]
		break; # We have our data so stop looking.
	    }
	}
	# puts "rho=$rho velx=$velx p=$p T=$T massf_N=$massf_N"
    }
    # The differences with respect to the reference values should be small. 
    list [expr abs($rho - $rho_ref)/$rho_ref < 1.0e-2] \
    	 [expr abs($velx - $velx_ref)/$velx_ref < 1.0e-2] \
    	 [expr abs($p - $p_ref)/$p_ref < 1.0e-2] \
    	 [expr abs($massf_N - $massf_N_ref)/$massf_N_ref < 5.0e-2] \
    	 [expr abs($T - $T_ref)/$T_ref < 1.0e-2]
} -result {1 1 1 1 1}

cleanupTests
